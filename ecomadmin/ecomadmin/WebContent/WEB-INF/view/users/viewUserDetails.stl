<#assign form  =JspTaglibs["http://www.springframework.org/tags/form"]>
<#assign spring=JspTaglibs["http://www.springframework.org/tags"]>
<script type="text/javascript" src="resources/js/jquery/plugins/jquery.form.js"></script>
<#if user?has_content>
		<br class="clear"/>
		<#if ERROR_ADD_SUBSCRIPTION?has_content>
			<div class="subHeader">
				<span>There was a error in adding the subscription for the user. Please see the error below. <br />
				${ERROR_ADD_SUBSCRIPTION}</span>
			</div>
			<br class="clear"/><br class="clear"/>
		</#if>
		<#if ERROR_MODIFY_SUBSCRIPTION?has_content>
			<div class="subHeader">
				<span>There was a error in modifying the subscription for the user. Please see the error below. <br />
				${ERROR_MODIFY_SUBSCRIPTION}</span>
			</div>
			<br class="clear"/><br class="clear"/>
		</#if>
		<#if ERROR_AUTHORIZE_SUBSCRIPTION?has_content>
			<div class="subHeader">
				<span>There was a error in authorizing the subscription for the user. Please see the error below. <br />
				${ERROR_AUTHORIZE_SUBSCRIPTION}</span>
			</div>
			<br class="clear"/><br class="clear"/>
		</#if>
		<#if ERROR_ARCHIVE_USER?has_content>
			<div class="subHeader">
				<span>There was a error deleting the user. Please see the error below. <br />
				${ERROR_ARCHIVE_USER}</span>
			</div>
			<br class="clear"/><br class="clear"/>
		</#if>

		<#---BEGIN TABS--->
		<div id="beginTabs" >
			<div id="tabstrip">
		        <ul>
					<li class="k-state-active" id="userDetails">
					User Details
					</li>

					<li id="creditCard">
					Credit Card Details
					</li>

					<li id="subsDetails">
					Subscription Details
					</li>

					<li id="recurringPayHistory">
					Recurring Payment History
					</li>

					<li id="payAsUGoHistory">
					Pay As You Go History
					</li>
				</ul>

		        	<!--begin User Details tab-->
		        	<div class="k-content" id="userDetails" width="50%">
						<!--begin two-column table-->
						<table width="100%">
							<tr>
								<td align="right;" width="50%">
									<table class="table table-striped table-bordered table-hover">
										<tr>
											<td class="left"><b>Email:</b>&nbsp; <#if user.username?has_content>${user.username}</#if></td>
										</tr>
										<tr>
											<td class="left"><b>First Name:&nbsp;</b><#if user.firstName?has_content>${user.firstName?capitalize}</#if></td>
										</tr>
										<tr>
											<td class="left"><b>Last Name:&nbsp;</b><#if user.lastName?has_content>${user.lastName?capitalize}</#if></td>
										</tr>
										<tr>
											<td class="left"><b>Phone Number:&nbsp;</b><#if user.phone?has_content>${user.phone}</#if></td>
										</tr>
										<tr>
											<td class="left"><b>Firm Name:</b>&nbsp; <#if user.firmName?has_content>${user.firmName}</#if></td>
										</tr>
		            				</table>
		            			</td>
								<td align="left;" width="50%">
								 	<table class="table table-striped table-bordered table-hover">
										<tr>
											<td class="left"><b>Account Created On:&nbsp;</b>${user.getDateTimeCreatedString()}</td>
										</tr>
										<tr>
											<td class="left"><b>Last Login Time:&nbsp;</b>${user.getCurrentLoginTimeString()}</td>
										</tr>
										<tr>
											<td class="left"><b>Account Locked:&nbsp;</b><#if user.isAccountNonLocked()>No<#else>Yes</#if></td>
										</tr>
										<tr>
											<td class="left"><b>Active:&nbsp;</b><#if user.isActive()>Yes<#else>No</#if></td>
										</tr>
										<tr>
											<td class="left">&nbsp;</td>
										</tr>
									</table>
								</td>
							</tr>

							<tr>

								<td class="left">

									<#if user.isAccountNonLocked()>
										<form id="useraccountaction" name="useraccountaction" action="lockecomuser.admin" method="post" autocomplete="off">
											<input type="hidden" id="nodename" name="nodename" value="${user.getRegisteredNode()}" />
											<input type="checkbox" name="sendnotification" style="display:none" value="true" />
											<textarea id="comments" name="comments" style="display:none"></textarea>
											<input type="hidden" id="username" name="username" value="${user.username}" />
											<#if SystemUtil.isPSOSuperAdmin(request)>
												<a name="btnsubmit" id="btnsubmit" class="noBgButtons" style="padding:0px;cursor:pointer;"><img src="resources/images/lock.png" style="padding:0px;"/>Lock User</a>
											</#if>
										</form>
									<#else>
										<form id="useraccountaction" name="useraccountaction" action="unlockecomuser.admin" method="post" autocomplete="off">
											<input type="hidden" id="nodename" name="nodename" value="${user.getRegisteredNode()}" />
											<input type="checkbox" name="sendnotification" style="display:none" value="true" />
											<textarea id="comments" name="comments" style="display:none"></textarea>
											<input type="hidden" id="username" name="username" value="${user.username}"/>
											<#if SystemUtil.isPSOSuperAdmin(request)>
												<a name="btnsubmit" id="btnsubmit" style="padding:0px;cursor:pointer;"><img src="resources/images/unLock.png" style="padding:0px;"/>UnLock User</a>
											</#if>
										</form>
									</#if>

								</td>

								<td class="left">
									<#if SystemUtil.isPSOSuperAdmin(request)>
										<form id="frmArchiveUser" name="frmArchiveUser" action="archiveUser.admin" method="post" autocomplete="off">
											<input type="hidden" id="nodename" name="nodename" value="${user.getRegisteredNode()}" />
											<input type="hidden" id="username" name="username" value="${user.username}"/>
											<input type="hidden" id="archievecomments" name="archievecomments" value="" style="width:300px;"/>
											<a class="btnArchieve" id="btnArchieve" style="cursor:pointer;"><img src="resources/images/deleteUser.png" alt="Delete User" title="Delete User" width="32px" height="32px">Delete User</a>
										</form>
									</#if>
								</td>
							</tr>

						</table>
		            </div>
		        	<!--end 1st tab-->


		        	<!--begin Credit Card Details tab-->
			        	<div class="k-content" id="creditCard">
					        	<div id="creditCardContents">
					        	</div>
			        	</div> <!--end 2nd tab-->


		        	<!--begin Subscription Details tab-->
		        	<div class="k-content" id="subsDetails">
		        		<span class="emptydata" id="norecordssub" />
				       	<#if subscriptions?has_content && subscriptions?size &gt; 0>
							<table id="userSubscriptionList" role="grid" class="kendogrid table-striped table-bordered table-hover" cellspacing="0">
								<tr>
									<th data-field="accessId" class="left" filter='false'>Access Id</th>
									<th data-field="Site" class="left" filter='false'>Site</th>
									<th data-field="Subscription" class="left" filter='false'>Subscription</th>
									<th data-field="Type" class="left" filter='false'>Type</th>
									<th data-field="Status" class="left" filter='false'>Status</th>
									<th data-field="lastBillintDate" class="left" filter='false'>Last Billing Date</th>
									<th data-field="nextBillingDate" class="left" filter='false'>Next Billing Date</th>
									<th data-field="isFirmLevelAccess" class="left" filter='false'>Firm Level Access</th>
									<th data-field="subscribedOn" class="left" filter='false'>Subscribed On</th>
									<th data-field="modifiedOn" class="left" filter='false'>Subscription Modified On</th>
									<th data-field="accountModificationDate" class="left" filter='false'>Account Modified On</th>
									<th data-field="modifiedBy" class="left" filter='false'>Modified By</th>
									<th data-field="authorizedOn" class="left" filter='false'>Authorized On</th>
									<th data-field="authorizedBy" class="left" filter='false'>Authorized By</th>
									<th data-field="fee" class="left" filter='false'>Fee</th>
									<#if SystemUtil.isPSOSuperAdmin(request) || request.isUserInRole("C_USER_ADMIN")>
										<th class="left" filter='false'>Actions</th>
									</#if>
									<th  data-field="comments" class="left" filter='false'>Comments</th>
								</tr>
									<#assign totalDue = 0 >
									<#list subscriptions as subscription >
									<#if subscription.siteName?has_content>
									<#if !subscription.isActive() || subscription.isMarkedForCancellation>
										<tr class="unPaid">
									<#else>
										<tr class="paid">
									</#if>
									<td class="left" style="word-wrap:break-word;">${subscription.accessId}</td>
								<td class="left" style="word-wrap:break-word;">${subscription.siteName}</td>
								<td class="left">${subscription.subscription}</td>
								<td class="left">
								<#if subscription.category = 'NON_RECURRING_SUBSCRIPTION'>
									Pay As You Go
								<#elseif subscription.category = 'RECURRING_SUBSCRIPTION'>
									Recurring
								<#elseif subscription.category = 'FREE_SUBSCRIPTION' && subscription.subscriptionFee = 0>
									Free
								</#if>
								</td>
								<td class="left">
								<#if subscription.isAuthorized()>
								<#if !subscription.accessOverridden>
								<#if subscription.isMarkedForCancellation>
								Marked for Cancellation
								<#elseif subscription.isActive()>
								Paid
								<#elseif subscription.accessOverridden>
								N/A
								<#elseif !subscription.isActive() && !subscription.accessOverridden >
								<#assign totalDue = totalDue + subscription.subscriptionFee >
								Payment Due
								</#if>
								<#else>
								Active
								</#if>
								<#else>
								Authorization Pending
								</#if>
								</td>
									<td class="left"><#if subscription.getLastBillingDate()?has_content && !subscription.accessOverridden>${subscription.getLastBillingDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<td class="left"><#if subscription.getNextBillingDate()?has_content && !subscription.accessOverridden>${subscription.getNextBillingDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<#if subscription.isFirmLevelAccess() >
										<#if subscription.isFirmAccessAdmin()>
											<td class="left"><i class="icon-user bigger-120 green" alt="Firm Administrator"></i>&nbsp;&nbsp;Yes</td>
										<#else>
											<td class="left">Yes</td>
										</#if>
									<#else>
										<td class="left">No</td>
									</#if>
									<td class="left"><#if subscription.getCreatedDate()?has_content && !subscription.accessOverridden>${subscription.getCreatedDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<td class="left"><#if subscription.getModifiedDate()?has_content>${subscription.getModifiedDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<td class="left"><#if subscription.getAccountModifiedDate()?has_content>${subscription.getAccountModifiedDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<td class="left" style="word-wrap:break-word;"><#if subscription.getModifiedBy()?has_content>${subscription.getModifiedBy()}<#else>N/A</#if></td>
									<td class="left"><#if subscription.getAuthorizationDate()?has_content>${subscription.getAuthorizationDate()?string("MM/dd/yyyy hh:mm a zzz")}<#else>N/A</#if></td>
									<td class="left"><#if subscription.getAuthorizedBy()?has_content>${subscription.getAuthorizedBy()}<#else>N/A</#if></td>
									<td class="right" style="text-align:right"><#if subscription.getSubscriptionFee()?has_content>${subscription.getSubscriptionFee()?string.currency}<#else>N/A</#if></td>
									<#if SystemUtil.isPSOSuperAdmin(request) || request.isUserInRole("C_USER_ADMIN")>
										<td class="left">
										<#if !subscription.isAuthorized()>
										<span><a class="authorizeAccess" style="cursor:pointer;" name="${subscription.getUserAccessId()}"><img src="resources/images/authorize.png" alt="Authorize Access" title="Authorize Access"></a></span>
										<#else>
										<#if subscription.category = 'RECURRING_SUBSCRIPTION' && !subscription.isActive()>
										<#if !subscription.isActive() && !subscription.isFirmLevelAccess()>
										<span><a class="enableAccess" style="cursor:pointer;" name="${subscription.getUserAccessId()}"><img src="resources/images/accept.png" alt="Enable Access" title="Enable Access"></a></span>
										</#if>
										</#if>
										</#if>
										<#if subscription.category = 'RECURRING_SUBSCRIPTION' && !subscription.isActive() && !subscription.isMarkedForCancellation>
										<span><a class="cancelSubscription" style="cursor:pointer;" name="${subscription.getUserAccessId()}"><img src="resources/images/remove.png" alt="Cancel Subscription" title="Cancel Subscription"></a></span>
										</#if>
										<span><a class="removeAccess" style="cursor:pointer;" name="${subscription.getUserAccessId()}"><img src="resources/images/delete.png" alt="Remove Access" title="Remove Access"></a></span>
										</td>
									</#if>
									<td class="left"><#if subscription.getComments()?has_content>${subscription.getComments()}</#if></td>
								</tr>

								</#if>
								</#list>
							</table>
							<table id="subscriptionTotal" class="table table-striped table-bordered table-hover" width="100%" text-align="right" cellspacing="0">
								<#if totalDue &gt; 0>
								<tr class="unPaid">
								<#else>
								<tr class="paid">
								</#if>
								<#if SystemUtil.isPSOSuperAdmin(request) || SystemUtil.isPSOTxAdmin(request)>

								</#if>
								<td width="100%" align="right" >
								Total Amount Due: &nbsp;
								<#if totalDue &gt; 0>
								${totalDue?string.currency}
								 <#else>
									$0.00
								 </#if>
								</td>
								</tr>
							</table>
							<table width="100%" text-align="left">
								<tr width="100%">
								<td width="200px" id="tdAddNewSub">
								<a href="#divAddNewSubscription" title="Add New Subscription" id="linkAddNewSubscription" ><i class="icon-plus-sign green bigger-120"></i> Add New Subscription</a>
								</td>
								<td width="auto"><i class="icon-user green bigger-120"></i>&nbsp;= Firm Administrator</td>
								</tr>
							</table>

						<#else>
						<i class="red icon-warning-sign"></i><span class="red">&nbsp;User does not have any subscriptions.</span>
						</#if>
		        	</div> <!--end 3rd tab-->



		        	<!--begin Recurring Payment History tab-->
		        	<div class="k-content" id="recurringPayHistory">
		        			<i class="" id="warning"></i>
		        			<span class="emptydata" id="norecordsrecur" />
							<div id="grid_recurring" name="grid_recurring">
							</div>
		        	</div>  <!--End 4th tab-->



		        	<!--begin Pay As You Go History tab-->
		        	<div class="k-content" id="payAsUGoHistory">
		        			<i class="" id="warning2"></i>
		        			<span class="emptydata" id="norecordspayasyougo" />
	        			  	<div id="grid_payAsYouGo" name="grid_payAsYouGo">
							</div>
		        	</div> <!--end 5th tab-->

			</div> <!--End tabStrip--->
		</div> <!--End k-content--->
		<#---END TABS--->

				<br class="clear"/><br class="clear"/><br class="clear"/>
				<div style="display:none">
					<div id="divAddNewSubscription" style="background-color:#ffffff;width:800px;height:250px;text-align:left;">
						<br />
						<label id="lblMessage" name="lblMessage" />
						<br />
						<input type="hidden" id="userName" name="userName" value="${user.username}">
						<table style="margin:0px;" cellspacing="5">
							<tr>
							<td>Select Site:</td>
							<td><select id="siteId2" name="siteId2" class="k-widget k-dropdownlist" tabindex="1">
					            	<#if sites?has_content>
					            		<option value="" selected>Select Site</option>
					            	    <#foreach site in sites>
					                        	<option value="${site.getNode().getName()}|${site.id}"> ${site.description}</option>
					            		</#foreach>
					        		</#if>
					 		</select>
					 		</td>
					 		</tr>
					 		<tr>
							<td>Select Subscription :</td>
					 		<td><select id="accessIdAddSubscription" name="accessIdAddSubscription" class="k-widget k-dropdownlist"><option value="" selected>Select a Subscription</option></select></td>
						 	</tr>
						 	<tr>
					 		<td colspan="2" style="padding:5px 0 0 70px;">
						 		<a name="btnAddSubscription" id="btnAddSubscription"href="#" class="btn btn-small btn-search btn-success">
									<icon class="icon-plus-sign white"></i>
									<span class="fontHelvetica">Add Subscription</span>
								</a>
							</td>
					 		</tr>
					 	</table>
					</div>
				</div>


<script type="text/javascript">

	function onInvokeAction(id, action) {
	    $.jmesa.setExportToLimit(id, '');
	    var parameterString = createParameterStringForLimit(id);
	    parameterString = parameterString + "&username=" + $("#username").val();
	    if (id == "webTransactions") {
	        $.get('viewecomuserwebhistory.admin?ajax=true&' + parameterString, function(data) {
		    	$("#webTransactionsHolder").html(data)
			});
		} else {
			$.get('viewecomuserrecurringhistory.admin?ajax=true&' + parameterString, function(data) {
		    	$("#recurringTransactionsHolder").html(data)
			});
		}
	}

	$(document).ready(function() {
			$( "#main_menu" ).accordion( "option", "active", 1 );
			    $('#frmccinfo').validationEngine();
			    $('#frmccinfo').validationEngine('hide');
			    $('#frmAddNewSubscription').validationEngine();
			    $('#frmAddNewSubscription').validationEngine('hide');
			    $('#frmArchiveUser').validationEngine();
			    $('#frmArchiveUser').validationEngine('hide');
			    $("#tabstrip").kendoTabStrip({activate: onActivate, animation:false});

			    function onActivate(e) {
			        if (e.item.id == "recurringPayHistory") {
				    	getRecurringTransactions();
				    } else if (e.item.id == "payAsUGoHistory") {
				    	getPayAsYouGoTransactions();
				    } else if (e.item.id == "creditCard"){
				    	getAccountInfo($("#username").val());
				    }
                }

		       	var siteList2 = $("#siteId2").kendoDropDownList();
	        	var accessList2 = $("#accessIdAddSubscription").kendoDropDownList({
		            autoBind: false,
		            cascadeFrom: "siteId2",
		            optionLabel: "All Subscriptions...",
		            dataTextField: "description",
		            dataValueField: "id",
		            dataSource: {
		                type: "json",
		                serverFiltering: true,
		                transport: {
		                    read: {
						        url: "getsubscriptionsbysite.admin?",
						        data: function(){
						            return {
						                siteId: $("#siteId2").val()
						            };
						        }
						    }
		                }
		            }
		        }).data("kendoDropDownList");


				$("#processing").hide();

				$("a#accountUpdate").fancybox({
					'hideOnContentClick': true,
					'beforeClose': function() {
					  $('#frmccinfo').validationEngine('hide');
					},
					overlayOpacity:0.6,
					hideOnOverlayClick: false,
					hideOnContentClick: false,
					titlePosition: 'outside'
				});

		 		$( "#btnsubmit" ).button({
			            icons: {
			                primary: "ui-icon-arrowrefresh-1-e"
			            }
			    });

			    $("a#linkAddNewSubscription").fancybox({
					'hideOnContentClick': true,
					'beforeClose': function() {
					  $('#frmAddNewSubscription').validationEngine('hide');
					  $("#siteInfo").val("");
					  $('#accessId').children().remove();
					  $('#accessId').append('<option value="" selected>Select a Subscription</option>');
					},
					overlayOpacity:0.6,
					hideOnOverlayClick: false,
					hideOnContentClick: false,
					titlePosition: 'outside'
				});

				$("#userSubscriptionList").kendoGrid({
					detailInit: fetchUsersForSubscription,
					dataBound: function(e) {
						var data = this.dataSource.options.data;
						if(this.dataSource.data().length == 0)
					     {
					        this.wrapper.hide();
					        $("#norecordssub").text("User does not have subscriptions");
					        $("#subscriptionTotal").hide();
					     }
					},
					resizable: true,
                	scrollable: true,

					schema: {
							model: {
									fields: {
											accessId: {},
											Site: {},
											Subscription: {},
											Type: {},
											Status: {},
											lastBillintDate: {},
											nextBillingDate: {},
											subscribedOn: {},
											modifiedOn: {},
											accountModificationDate: {},
											modifiedBy: {},
											authorizedOn: {},
											authorizedBy: {},
											fee: {},
											isFirmAccessAdmin: {},
											isFirmLevelAccess: {},
											comments: {}
									}
							}
					},
					columns: [
                        { field: "accessId", title:"Id"},
                        { field: "Site", title:"Site"},
                        { field: "Subscription", title:"Subscription"},
                        { field: "Type", title: "Type"},
                        { field: "Status", title: "Status"},
                        { field: "lastBillintDate", title: "Last Billing Date"},
                        { field: "nextBillingDate", title: "Next Billing Date"},
                        { field: "isFirmLevelAccess", title: "Firm Level Access"},
                        { field: "subscribedOn", title: "Subscribed On"},
                        { field: "modifiedOn", title: "Subscription Modified On"},
                        { field: "accountModificationDate", title: "Account Modified On"},
                        { field: "modifiedBy", title: "Modified By"},
                        { field: "authorizedOn", title: "Authorized On"},
                        { field: "authorizedBy", title: "Authorized By"},
                        { field: "fee", title: "Fee", attributes: {"class": "right"}},
                        { field: "actions", title: "Actions"},
                        { field: "comments", title: "Comments"}
                    ]
				});

				var grid = $("#userSubscriptionList").data("kendoGrid");
				grid.hideColumn("accessId");

				grid.bind("dataBound", grid_dataBound);
				grid.dataSource.fetch();

				function grid_dataBound(e) {
  					var currentViewRecords = grid.dataSource.view();
				    for (var i = 0; i < currentViewRecords.length; i++) {
				        if (currentViewRecords[i].isFirmLevelAccess == "No") {
				            var currentUID = currentViewRecords[i].uid;
				            var gridRow = grid.table.find("[data-uid=" + currentUID + "]");
				            //clear the arrow:
				            gridRow.find(".k-hierarchy-cell").html("");
				        }
				    }
				}




				function fetchUsersForSubscription(e) {
				    $("<div/>").appendTo(e.detailCell).kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: "getFirmUsersBySubscription.admin?userName=" + $("#username").val() + "&accessId=" + e.data.accessId
                            },
                            serverPaging: true,
                            serverSorting: true,
                            serverFiltering: true,
                            pageSize: 5
                        },
                        scrollable: false,
                        sortable: true,
                        pageable: true,
                        dataBound: function(e){
							 if(this.dataSource.data().length == 0)
							 {
							    this.wrapper.hide();
							 }
						},
                        columns: [
                            { field: "firstName", title:"First Name", template: '#=firstName.substring(0, 1).toUpperCase() + firstName.substring(1).toLowerCase() #', attributes: {"class": "capitalize"}},
                            { field: "lastName", title:"Last Name", template: '#=lastName.substring(0, 1).toUpperCase() + lastName.substring(1).toLowerCase() #', attributes: {"class": "capitalize"}},
                            { field: "username", title:"Username", width: 200},
                            { field: "phone", title: "Phone"},
                            { field: "isFirmAccessAdmin", title: "Firm Admin", template: "#= isFirmAccessAdmin ? 'Yes' : 'No' #", width: 80 },
                            { field: "subscriptionAction", title: "Admin Actions", width: 100, template : function(d){ return getActionLink(d);} }
                        ]
                    });

                }



                function emptyGridFix() {
				    if (this.total() > 0) return; // continue only for empty grid
				    var msg = this.options.emptyMsg;
				    if (!msg) msg = 'No records to display'; // Default message
				    $(this.options.table).parent().html('<div class="empty-grid">' + msg + '</div>')
				}

	            var dataSource_recurring = new kendo.data.DataSource({
	   				transport: {
	        			read: {
		        			url: function(e){
								var url = 'getRecurTransactionsForUser.admin?username=' + $("#username").val();
								return url;
					        },
					        dataType: "json",
					        type: "GET"
						 }
	             	},
	             	group: { field: "siteDescription" },
                    pageSize: 5
	            });

				$("#grid_recurring").kendoGrid({
                    dataSource: dataSource_recurring,
                    autoBind: false,
                    navigatable: true,
                    resizable: true,
                    scrollable: true,
                    groupable: true,
                    sortable: {
                        mode: "single",
                        allowUnsort: true
                    },
                    pageable: {
                		refresh: true,
                		pageSizes: true,
                		pageSize: true,
                		numeric: true,
                		info: true,
                		input: true
                    },
                    columns: [
                        { field: "transactionDate", title: "Transaction Date"},
                        { field: "txRefNum", title: "Transaction Number", template:"<a href='viewtransactiondetails.admin?transactionRefNum=#=txRefNum#&paymentChannel=RECURRING' target='_blank'>#=txRefNum#</a>"},
                        { field: "siteDescription", title: "Site Name"},
                        { field: "accessDescription", title: "Subscription"},
                        { field: "cardNumber", title: "Card Number",  attributes: {"class": "right"}},
                        { field: "accountName", title: "Name on Card"},
                        { field: "transactionType", title: "Transaction Type"},
                        { field: "createdBy", title: "Created By", sortable: true},
                        { field: "baseAmount", title: "Total Amount", attributes: {"class": "right"}, template: '#= kendo.toString(kendo.parseFloat(baseAmount), "c") #'},
                        ],
                    editable: "false",
                    dataBound: function(e){
					     if(this.dataSource.data().length == 0)
					     {
					        this.wrapper.hide();
					        $("#norecordsrecur").text("User does not have any recurring payments")
					        $("#norecordsrecur").addClass("red");
					        $("#warning").addClass("icon-warning-sign red");
					     }
				  	}
                }).data("kendoGrid");  //END KENDO GRID RECURRING TRANSACTIONS

                //START KENDO GRID PAY AS YOU GO TRANSACTIONS
                var dataSource_payAsYouGo = new kendo.data.DataSource({
	   				 transport: {
	        			read: {
		        			url: function(e){
								var url = 'getPayAsUGoTransactionsForUser.admin?username=' + $("#username").val();
								return url;
					        },
					        dataType: "json",
					        type: "GET"
						 }
	             	},
                    pageSize: 5
	            });

				$("#grid_payAsYouGo").kendoGrid({
                    dataSource: dataSource_payAsYouGo,
                    autoBind: false,
                    navigatable: true,
                    resizable: true,
                    scrollable: true,
                    groupable: true,
                    sortable: {
                        mode: "single",
                        allowUnsort: true
                    },
                    pageable: {
                		refresh: true,
                		pageSizes: true,
                		pageSize: true,
                		numeric: true,
                		info: true,
                		input: true
                    },
                    columns: [
                        { field: "transactionDate", title: "Transaction Date"},
                        { field: "txRefNum", title: "Transaction Number", template:"<a href='viewtransactiondetails.admin?transactionRefNum=#=txRefNum#&paymentChannel=PAYASUGO' target='_blank' >#=txRefNum#</a>"},
                        { field: "siteDescription", title: "Site Name"},
                        { field: "accessDescription", title: "Subscription"},
                        { field: "cardNumber", title: "Card Number",  attributes: {"class": "right"}},
                        { field: "accountName", title: "Name on Card"},
                        { field: "transactionType", title: "Transaction Type"},
                        { field: "createdBy", title: "Created By", sortable: true},
                        { field: "itemsPurchased", title: "Total Items", attributes: {"class": "right"}},
                        { field: "totalTxAmount", title: "Total Amount", attributes: {"class": "right"}, template: '#= kendo.toString(kendo.parseFloat(totalTxAmount), "c") #'},
                        ],
                    editable: "false",
                    dataBound: function(e){
					     if(this.dataSource.data().length == 0)
					     {
					        this.wrapper.hide();
					        $("#norecordspayasyougo").text("User does not have any pay as you go payments")
					        $("#norecordspayasyougo").addClass("red");
					        $("#warning2").addClass("icon-warning-sign red");
					     }
				  	}
                }).data("kendoGrid");
                //END KENDO GRID PAY AS YOU GO TRANSACTIONS


			    $(".zebraTable tr:even").addClass("stripe");

			    $("#btnArchieve").click(function() {
			 		var txt = 'Do you want to delete the user? <br /> If yes, enter any comments :<br /><textarea rows="7" cols="40" id="promptComments" name="promptComments" class="validate[required]"></textarea><br />(Upto 250 Characters allowed including spaces)<br /><label style="color:red">Note: Deleting the user will delete all the data associated with the user. Only users without any transactions can be deleted. This Action is irreversible.</label>';
					$.prompt(txt,{
					   buttons:[
							{title: 'Delete User',value:true},
							{title: 'Cancel',value:false}
							],
					    focus:1,
					    prefix:'jqismooth',
						submit: function(v,m,f){
							an = m.children('#promptComments');
					        if (v && f.promptComments === '' ) {
					            an.css("border","solid #ff0000 1px");
					            return false;
					        }
							submitArchieveForm(v,f);
						}
					});
				});

				function submitArchieveForm(v,f) {
					if (v)  {
						$('#archievecomments').val(f.promptComments);
				  		$("#frmArchiveUser").submit();
				    }
				    else {$.prompt.close();}
				}


			 	$("#btnsubmit").click(function() {
			 		var txt = 'Do you want to Notify the user? <br /> If yes, enter any comments you want to send:<br /><textarea rows="7" cols="40" id="promptComments" name="promptComments"></textarea><br />(Upto 250 Characters allowed including spaces)';
					$.prompt(txt,{
					   buttons:[
							{title: 'Notify User',value:true},
							{title: 'Do not Notify User',value:false}
							],
					    focus:1,
					    prefix:'jqismooth',
						submit: function(v,m,f){
							if (f.promptComments == "" || f.promptComments.length > 250) {
								an = m.children('#promptComments');
								an.css("border","solid #ff0000 1px");
								return false;
							}
							submitChangeForm(v, f);
						}
					});
				});


				$("#recHist").click(function() {
			        $.get('viewecomuserrecurringhistory.admin?username=' + $("#username").val(), function(data) {
				    	$("#recurringTransactionsHolder").html(data)
					});
				});
				$("#webHist").click(function() {
					$.get('viewecomuserwebhistory.admin?username=' + $("#username").val(), function(data) {
				    	$("#webTransactionsHolder").html(data)
					});
				});

				$("#btnAddSubscription").click(function () {
					$("#lblMessage").text('');
					$("#lblMessage").removeClass("success");
					$("#lblMessage").removeClass("error");
				    var userName = $("#divAddNewSubscription #userName").val();
					var siteId2 = $("#divAddNewSubscription #siteId2").val();
					var accessIdAddSubscription = $("#divAddNewSubscription #accessIdAddSubscription").val();
					if (userName != null && userName != ""  && siteId2 != null && siteId2 != "" && accessIdAddSubscription != null && accessIdAddSubscription != "") {
						var dataString = 'userName='+ userName + '&siteId2=' + siteId2 + '&accessIdAddSubscription=' + accessIdAddSubscription;
						$.ajax({
						cache: false,
					      type: "POST",
					      url: "addSubscription.admin",
					      data: dataString,
					      dataType: "json",
					      success: function(data) {
					    	  $.each(data, function(i,item){
					    		 if (item.code != "SUCCESS" && item.code!="ERROR") {
					    			 $("#lblMessage").val("System Error. Please contact administrator for more information.");
					    		 } else if (item.code == "SUCCESS") {
					    			 $("#lblMessage").text(item.description);
					    			 $("#lblMessage").addClass("success");
					    			 getUserDetails(userName, $("#tabstrip").data("kendoTabStrip").select().index());
					    		 } else {
					    			 $("#lblMessage").text(item.description);
					    			 $("#lblMessage").addClass("error");
					    		 }

					          });
					      },
					    });
					    return false;
					} else {
					 	$("#lblMessage").text("Please select the site and subscription!");
	    			 	$("#lblMessage").addClass("error");
					}
				});

				var lockunlockoptions = {
				    success: function(data) {
				    	$.each(data, function(i,item){
					        getUserDetails("${user.username}", $("#tabstrip").data("kendoTabStrip").select().index());
					        $.prompt(item.description);
					        var grid = $('#grid').data('kendoGrid');
							var selectedUserRow = grid.dataItem(grid.select());
							if(selectedUserRow.accountNonLocked == false){
								selectedUserRow.set('accountNonLocked', true);
							} else {
								selectedUserRow.set('accountNonLocked', false);
							}
							 $('[data-uid='+selectedUserRow.uid+']').addClass('k-state-selected');

						});
				    }
				};

				var archieveoptions = {
				    success: function(data) {
				    	$.each(data, function(i,item){
					    	if (item.code == "SUCCESS") {
					    		$.prompt(item.description);
					    		var grid = $('#grid').data('kendoGrid');
								grid.dataSource.read();
					    	} else {
						        $.prompt(item.description);
					    	}
				        });
				    }
				};

				$('#useraccountaction').ajaxForm(lockunlockoptions);

				$('#frmArchiveUser').ajaxForm(archieveoptions);

	});  //end DOCUMENT.READY


 	function getActionLink(firmUser){
		// If no Subscription is selected then no action can be performed on access
		var contents = '';
		if(firmUser.isFirmAccessAdmin == false){
			contents = contents +  '<span><a class="changeAdministrator" style="cursor:pointer;" onclick="changeAdministrator(\'' + $("#username").val() + '\', \'' + firmUser.username + '\',' + firmUser.accessId + '); return false;"><img src="resources/images/MakeAdmin.png" alt="Make An Administrator" title="Make An Administrator"></a></span>';
			if(firmUser.userAccessActive == true){
				// Disable Link
					contents = contents +
						'<span><a class="cancelSubscription" style="cursor:pointer;" onclick="enableDisableFirmSubscriptionPrompt(\'' + firmUser.username + '\', ' + firmUser.userAccessId + ', \'' + $("#username").val() + '\', false); return false;"><img src="resources/images/remove.png" alt="Disable Subscription" title="Disable Subscription"></a></span>';
			} else if (firmUser.userAccessActive == false){
				// Enable Link
				contents = contents +
					'<span><a class="enableAccess" style="cursor:pointer;" onclick="enableDisableFirmSubscriptionPrompt(\'' + firmUser.username + '\', ' + firmUser.userAccessId + ', \'' + $("#username").val() + '\', true); return false;"><img src="resources/images/accept.png" alt="Enable Subscription" title="Enable Subscription"></a></span>';
			}
			// add remove Link
			contents = contents +
				'<span><a class="removeAccess" style="cursor:pointer;" onclick="removeFirmLevelAccessPrompt(\'' + firmUser.username + '\', ' + firmUser.userAccessId + '); return false;"><img src="resources/images/delete.png" alt="Remove Subscription" title="Remove Subscription"></a></span>';
			if(firmUser.userLocked){
				contents = contents +
				'<span><a style="cursor:pointer;" onclick="lockUnlockFirmUserPrompt(\'' + firmUser.username + '\', false, \'' + firmUser.nodeName + '\'); return false;"><img src="resources/images/unLock.png" alt="Unlock User" title="Unlock User"></a></span>';
			} else {
				contents = contents +
				'<span><a style="cursor:pointer;" onclick="lockUnlockFirmUserPrompt(\'' + firmUser.username + '\', true, \'' + firmUser.nodeName + '\'); return false;"><img src="resources/images/lock.png" alt="Lock User" title="Lock User"></a></span>';
			}
		}
		return contents;
	}


	function enableDisableFirmSubscriptionPrompt(firmUserName, firmUserAccessId, adminUserName, enable){
		var txt = '';
		if(enable){
 			txt = 'Are you sure you want to enable firm subscription for user ' + firmUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><textarea rows="3" cols="33" id="enableDisableFirmUserAccessComments" name="enableDisableFirmUserAccessComments"></textarea>';
		} else {
			txt = 'Are you sure you want to disable firm subscription for user ' + firmUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><textarea rows="3" cols="33" id="enableDisableFirmUserAccessComments" name="enableDisableFirmUserAccessComments"></textarea>';
		}
		$.prompt(txt,{
		   buttons:[{title: 'Change',value:true}],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.enableDisableFirmUserAccessComments == "" || f.enableDisableFirmUserAccessComments.length > 100) {
						an = m.children('#enableDisableFirmUserAccessComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					enableDisableFirmUserSubscription(firmUserName, firmUserAccessId, adminUserName, f.enableDisableFirmUserAccessComments, enable);
			}
		});
	}

	function removeFirmLevelAccessPrompt(firmUserName, firmUserAccessId){
		var txt = 'Are you sure you want to remove firm subscription for user ' + firmUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><textarea rows="3" cols="33" id="removeFirmUserAccessComments" name="removeFirmUserAccessComments"></textarea>';
		$.prompt(txt,{
		   buttons:[{title: 'Change',value:true}],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.removeFirmUserAccessComments == "" || f.removeFirmUserAccessComments.length > 100) {
						an = m.children('#removeFirmUserAccessComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					removeFirmLevelAccess(firmUserName, firmUserAccessId, f.removeFirmUserAccessComments);
			}
		});
	}

	function lockUnlockFirmUserPrompt(firmUserName, isLock, nodeName){
		var txt = '';
		if(!isLock){
 			txt = 'Are you sure you want to Unlock firm level user ' + firmUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><textarea rows="3" cols="33" id="lockUnlockFirmUserComments" name="lockUnlockFirmUserComments"></textarea>';
		} else {
			txt = 'Are you sure you want to Lock firm level user ' + firmUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><textarea rows="3" cols="33" id="lockUnlockFirmUserComments" name="lockUnlockFirmUserComments"></textarea>';
		}
		$.prompt(txt,{
		   buttons:[{title: 'Change',value:true}],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.lockUnlockFirmUserComments == "" || f.lockUnlockFirmUserComments.length > 100) {
						an = m.children('#lockUnlockFirmUserComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					lockUnlockFirmUser(firmUserName, f.lockUnlockFirmUserComments, isLock, nodeName);
			}
		});
	}


	function enableDisableFirmUserSubscription(firmUserName, firmUserAccessId, adminUserName, comments, enable){
		$.ajax({
			cache: false,
		    type: 'POST',
		    url: "enableDisableFirmUserAccess.admin",
		     data: {
		       adminUserName: adminUserName,
		       firmUserName: firmUserName,
		       userAccessId: firmUserAccessId,
		       isEnable: enable,
		       comments: comments
		    },
	        success: function (results) {
	                if(results){
	                    if(results.errorCode == 'SUCCESS'){
							var grid = $('#userSubscriptionList').data('kendoGrid');
							grid.dataSource.read();
				 		}  else {
				 			// There were errors on server side display it
				 			$.prompt(getJsonError(results));
				 		}
	            	}
	        },

	        // Error occured on server
	        error: function (xhr, ajaxOptions, thrownError) {
	        	var response = JSON.parse(xhr.responseText);
	        	$.prompt(getJsonError(response));
	        }
		});
	}

	function removeFirmLevelAccess(firmUserName, firmUserAccessId, comments){
		$.ajax({
		    type: 'POST',
		    url: "removeFirmUserAccess.admin",
		     data: {
		       firmUserName: firmUserName,
		       userAccessId: firmUserAccessId,
		       comments: comments
		    },
	        success: function (results) {
	                if(results){
	                    if(results.errorCode == 'SUCCESS'){
							var grid = $('#userSubscriptionList').data('kendoGrid');
							grid.dataSource.read();
				 		}  else {
				 			// There were errors on server side display it
				 			$.prompt(getJsonError(results));
				 		}
	            	}
	        },

	        // Error occured on server
	        error: function (xhr, ajaxOptions, thrownError) {
	        	var response = JSON.parse(xhr.responseText);
	        	$.prompt(getJsonError(response));
	        }
		});
	}

	function lockUnlockFirmUser(firmUserName, comments, isLock, nodeName){
	$.ajax({
			cache: false,
		    type: 'POST',
		    url: "lockUnLockFirmUser.admin",
		     data: {
		       firmUserName: firmUserName,
		       isLock: isLock,
		       nodeName: nodeName,
		       comments: comments
		    },
	        success: function (results) {
	                if(results){
	                    if(results.errorCode == 'SUCCESS'){
							var grid = $('#userSubscriptionList').data('kendoGrid');
							grid.dataSource.read();
				 		}  else {
				 			// There were errors on server side display it
				 			$.prompt(getJsonError(results));
				 		}
	            	}
	        },

	        // Error occured on server
	        error: function (xhr, ajaxOptions, thrownError) {
	        	var response = JSON.parse(xhr.responseText);
	        	$.prompt(getJsonError(response));
	        }
		});
	}




  	function changeAdministrator(currentAdminUserName, newAdminUserName, accessId){
 		var txt = 'Are you sure you want to change firm administrator to user ' + newAdminUserName + ' ? <br /><br /> If Yes, please enter comments and click on Change. <br /><br /><textarea rows="3" cols="33" id="changeAdminComments" name="changeAdminComments"></textarea>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Change',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.changeAdminComments == "" || f.changeAdminComments.length > 100) {
						an = m.children('#changeAdminComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					changeAdmin(currentAdminUserName, newAdminUserName, accessId, f.changeAdminComments);
			}
		});
	}

	function changeAdmin(currentAdminUserName, newAdminUserName, accessId, comments){
		$.ajax({
			cache: false,
		    type: 'GET',
		    url: "changeFirmAdministrator.admin?currentAdminUserName=" + currentAdminUserName + "&newAdminUserName=" + newAdminUserName + "&accessId=" + accessId + "&comments=" + comments,
	        success: function (results) {
	                if(results){
	                    if(results.errorCode == 'SUCCESS'){
							var grid = $('#userSubscriptionList').data('kendoGrid');
							grid.dataSource.read();
				 		}  else {
				 			// There were errors on server side display it
				 			$.prompt(getJsonError(results));
				 		}
	            	}
	        },

	        // Error occured on server
	        error: function (xhr, ajaxOptions, thrownError) {
	        	var response = JSON.parse(xhr.responseText);
	        	$.prompt(getJsonError(response));
	        }
		});

	}

	function getJsonError(results){
		var errorString = '';
		for(var k in results.errors){
			errorString = errorString + results.errors[k] + '</br>';
		}
		return errorString = errorString + '</br>';
	}

	function getAccountInfo(userName){
        $.ajax({
        	cache: false,
            type: "GET",
            url: "getCreditCardDetails.admin?userName=" + userName,
            success: function(response) {
                $("#creditCardContents").html( response );
            }
    	});
	}

	function getRecurringTransactions(){
		var grid = $('#grid_recurring').data('kendoGrid');
		grid.dataSource.read();
		return false;
	}

	function getPayAsYouGoTransactions(){
		var grid = $('#grid_payAsYouGo').data('kendoGrid');
		grid.dataSource.read();
		return false;
	}

	function submitChangeForm(sendNotification, f) {
		if (sendNotification)  {
	      	$('input[name=sendnotification]').attr('checked', true);
	      	$('#comments').val(f.promptComments);
	    } else {
	    	$('input[name=sendnotification]').attr('checked', false);
	    	$('#comments').val(f.promptComments);
	    }
	    $("#useraccountaction").submit();
	}

	$(".enableAccess").click(function() {
 		var txt = 'Do you want to enable the access for the user? <br /><br /> If Yes, please enter comments and click on Enable Access to enable the access for the user. <br /><br />The page refreshes once the access is enabled/disabled to reflect the changes.<br /><textarea rows="10" cols="40" id="enableComments" name="enableComments"></textarea><input name="enableuseraccessid" type="hidden" value=' + $(this).attr("name") + '>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Enable Access',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.enableComments == "" || f.enableComments.length > 250) {
						an = m.children('#enableComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					enableAccess(v, f);
			}
		});
	});

	function enableAccess(sendNotification, f) {
		var usernametxt="${user.username}";
		var nodenametxt="${user.getRegisteredNode()}";
		var useraccessidtxt=f.enableuseraccessid;
		var commentstxt=f.enableComments;
		$.ajax({
			cache: false,
			cache: false,
		    type: 'POST',
		    url: "enabledisableaccess.admin",
		    data: {
		       username: usernametxt,
		       nodename: nodenametxt,
		       useraccessid: useraccessidtxt,
		       comments: commentstxt,
		       enableaccess: true
		    },
		    success: function (data) {
		       $.each(data, function(i,item){
		    		 if (item.code != "SUCCESS" && item.code!="ERROR") {
		    			 $.prompt("System Error. Please contact administrator for more information.");
		    		 } else if (item.code == "SUCCESS") {
		    			 $.prompt(item.description);
		    			 getUserDetails(usernametxt, $("#tabstrip").data("kendoTabStrip").select().index());
		    		 } else {
		    			  $.prompt(item.description);
		    		 }
		        });
		    }
		});
	}

	$(".disableAccess").click(function() {
 		var txt = 'Do you want to disable the access for the user? <br /><br /> If Yes, please enter Comments and click on Disable Access to disable the access for the user. <br /><br />The page refreshes once the access is enabled/disabled to reflect the changes.<br /><textarea rows="10" cols="40" id="enableComments" name="enableComments"></textarea><br />(Upto 250 Characters allowed including spaces)<br /><input name="enableuseraccessid" type="hidden" value=' + $(this).attr("name") + '>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Disable Access',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.enableComments == "" || f.enableComments.length > 250) {
						an = m.children('#enableComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					disableAccess(v, f);
			}
		});
	});

	function disableAccess(sendNotification, f) {
		var usernametxt="${user.username}";
		var nodenametxt="${user.getRegisteredNode()}";
		var useraccessidtxt=f.enableuseraccessid;
		var commentstxt=f.enableComments;
		$.ajax({
			cache: false,
		    type: 'POST',
		    url: "enabledisableaccess.admin",
		    data: {
		       username: usernametxt,
		       nodename: nodenametxt,
		       useraccessid: useraccessidtxt,
		       comments: commentstxt,
		       enableaccess: false
		    },
		    success: function (data) {
		       $.each(data, function(i,item){
		    		 if (item.code != "SUCCESS" && item.code!="ERROR") {
		    			 $.prompt("System Error. Please contact administrator for more information.");
		    		 } else if (item.code == "SUCCESS") {
		    			 $.prompt(item.description);
		    			 getUserDetails(usernametxt, $("#tabstrip").data("kendoTabStrip").select().index());
		    		 } else {
		    			  $.prompt(item.description);
		    		 }
		        });
		    }
		});
	}

	$(".removeAccess").click(function() {
 		var txt = 'Do you want to permanently remove the access for the user? <br /><br /> If Yes, please enter Comments and click on Remove to permanently remove the access for the user.<br /><br />The page refreshes once the access is removed to reflect the changes.<br /><textarea rows="10" cols="40" id="removeComments" name="removeComments"></textarea><br />(Upto 250 Characters allowed including spaces)<br /><input name="removeuseraccessid" type="hidden" value=' + $(this).attr("name") + '>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Remove Access',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					if (f.removeComments == "" || f.removeComments.length > 250) {
						an = m.children('#removeComments');
						an.css("border","solid #ff0000 1px");
						return false;
					}
					removeAccess(v, f);
			}
		});
	});

	function removeAccess(sendNotification, f) {
		var usernametxt="${user.username}";
		var nodenametxt="${user.getRegisteredNode()}";
		var useraccessidtxt=f.removeuseraccessid;
		var commentstxt=f.removeComments;
		$.ajax({
			cache: false,
		    type: 'POST',
		    url: "removeaccess.admin",
		    data: {
		       username: usernametxt,
		       nodename: nodenametxt,
		       useraccessid: useraccessidtxt,
		       comments: commentstxt
		    },
		    success: function(data) {
	    	  $.each(data, function(i,item){
	    		 if (item.code != "SUCCESS" && item.code != "ERROR") {
	    		 	$.prompt.close();
	    		    $.prompt("System Error. Please contact administrator for more information.");
	    		 } else if (item.code == "SUCCESS") {
	    			$.prompt.close();
	    		    $.prompt(item.description);
	    		 	var tabIndex = 0;
		        	if ($("#tabstrip").data("kendoTabStrip") != null)
		        	{
						tabIndex = $("#tabstrip").data("kendoTabStrip").select().index()
					}
					getUserDetails(usernametxt, tabIndex);
	    		 } else {
	    			$.prompt.close();
	    		    $.prompt(item.description);
	    		 }
	          });
			},
		});
	}

	$(".cancelSubscription").click(function() {
 		var txt = 'Do you want to proceed with cancelling the access for the user? <br />The page refreshes once the access is cancelled/marked for cancellation to reflect the changes.<br /><input name="canceluseraccessid" type="hidden" value=' + $(this).attr("name") + '>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Cancel Access',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					cancelAccess(v, f);
			}
		});
	});

	function cancelAccess(sendNotification, f) {
		var usernametxt="${user.username}";
		var nodenametxt="${user.getRegisteredNode()}";
		var useraccessidtxt=f.canceluseraccessid;
		$.ajax({
			cache: false,
		    type: 'POST',
		    url: "cancelaccess.admin",
		    data: {
		       username: usernametxt,
		       nodename: nodenametxt,
		       useraccessid: useraccessidtxt
		    },
		    success: function (data) {
		    	$.each(data, function(i,item){
		    		 if (item.code != "SUCCESS" && item.code!="ERROR") {
		    			 $.prompt("System Error. Please contact administrator for more information.");
		    		 } else if (item.code == "SUCCESS") {
		    			 $.prompt(item.description);
		    			 getUserDetails(usernametxt, $("#tabstrip").data("kendoTabStrip").select().index());
		    		 } else {
		    			  $.prompt(item.description);
		    		 }
		        });
		    }
		});
	}

	$(".authorizeAccess").click(function() {
 		var txt = 'Do you want to authorize access to the user? <br />The page refreshes once the access is authorized.<br /><input name="authorizeuseraccessid" type="hidden" value=' + $(this).attr("name") + '>';
		$.prompt(txt,{
		   buttons:[
				{title: 'Authorize Access',value:true}
				],
		    focus:1,
		    prefix:'jqismooth',
			submit: function(v,m,f){
					authorizeAccess(v, f);
			}
		});
	});

	function authorizeAccess(sendNotification, f) {
		var usernametxt="${user.username}";
		var nodenametxt="${user.getRegisteredNode()}";
		var useraccessidtxt=f.authorizeuseraccessid;

		$.ajax({
			cache: false,
		    type: 'POST',
		    url: "authorizeaccess.admin",
		    data: {
		       username: usernametxt,
		       nodename: nodenametxt,
		       useraccessid: useraccessidtxt
		    },
		    success: function (data) {
		       $.each(data, function(i,item){
	    		 if (item.code != "SUCCESS" && item.code!="ERROR") {
	    			 $.prompt("System Error. Please contact administrator for more information.");
	    		 } else if (item.code == "SUCCESS") {
	    			 $.prompt(item.description);
	    			 getUserDetails(usernametxt, $("#tabstrip").data("kendoTabStrip").select().index());
	    		 } else {
	    			  $.prompt(item.description);
	    		 }
	        });
		    }
		});
	}

	$(function() {
 		$("#accountUpdate").button({
            icons: {
                primary: "ui-icon-locked"
            }
        });
    });





</script>

<#else>
	<b>User not found</b>
</#if>

