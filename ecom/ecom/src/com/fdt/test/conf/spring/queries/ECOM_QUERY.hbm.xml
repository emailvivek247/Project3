<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

 <sql-query callable="true" name="GET_RECURRING_ACCOUNT_INFO">
        {call SP_RECUR_GET_ACCOUNTINFO (:username) }
</sql-query>

 <sql-query name="GET_ACCESS_FOR_SITE">
    SELECT
        access.ID AS ACCESS_ID,
        access.ACCESS_CD AS ACCESS_CD,
        access.ACCESS_DESCR AS ACCESS_DESCR,
        access.GUEST_FLG AS GUEST_FLG,
        fee.FEE AS FEE,
        (SELECT CL1.code AS CL1_code FROM CODELOOKUP CL1 WHERE fee.SUBSCRIPTION_TYP_ID = CL1.ID) subTypeCode,
        (SELECT CL2.description AS CL2_description FROM CODELOOKUP CL2 WHERE fee.SUBSCRIPTION_TYP_ID = CL2.ID) subTypeDesc,
        (SELECT CL3.category AS CL3_category FROM CODELOOKUP CL3 WHERE fee.SUBSCRIPTION_TYP_ID = CL3.ID) subCategory,
        access.ACCESS_FEATURES AS ACCESS_FEATURES,
        access.DEFAULT_ACCESS_FLG AS DEFAULT_ACCESS_FLG,
        access.IS_VISIBLE IS_VISIBLE
    FROM
        ECOMM_SITE siteinfo,
        ECOMM_SITE_ACCESS siteaccess,
        AUTH_ACCESS access,
        ECOMM_SUBSCRIPTIONFEE fee
    WHERE
        siteinfo.ID =  siteaccess.site_id AND
        siteaccess.access_id = access.id  AND
        siteaccess.active = 'Y' AND
        siteaccess.ID = fee.SITEACCESS_ID AND
        siteinfo.ID = :siteId
    ORDER BY
        access.ACCESS_ORDER ASC
</sql-query>

<sql-query name="GET_AUTH_TERMS">
    <![CDATA[
		SELECT
			 TERMS.ID
			,TERMS.TERM_DESC
			,TERMS.DATE_TIME_CREATED
			,TERMS.DATE_TIME_MOD
			,TERMS.MOD_USER_ID
			,TERMS.SITE_ID
			,TERMS.DEFAULT_FLG
			,TERMS.TERM_TYP_ID
			,TERMS.CREATED_BY
		FROM
			AUTH_TERMS TERMS
			INNER JOIN AUTH_TERM_TYP TYPE ON TYPE.ID = TERMS.TERM_TYP_ID
			INNER JOIN ECOMM_SITE SITE ON SITE.ID = TERMS.SITE_ID
		WHERE
			TERMS.ACTIVE = 'Y' AND TYPE.TERM_TYP_CD = 'R' AND
			SITE.NAME = :siteName
    ]]>
</sql-query>


 <sql-query name="GET_SITES_FOR_NODE">
        SELECT
            S.ID AS S_ID,
            S.NAME AS S_NAME,
            s.IS_FIRM_NUMBER_REQUIRED AS IS_FIRM_NUMBER_REQUIRED,
            s.IS_BAR_NUMBER_REQUIRED AS IS_BAR_NUMBER_REQUIRED,
            AA.ID AS AA_ID,
            AA.ACCESS_CD AS AA_ACCESS_CD,
            AA.ACCESS_DESCR AS AA_ACCESS_DESCR,
            AA.GUEST_FLG AS AA_GUEST_FLG,
            LOOKUP.CATEGORY AS LOOKUP_CATEGORY,
            FEE.FEE AS FEE_FEE,
            S.SUBSCRIPTION_VALIDATION_TEXT AS S_SUBSCRIPTION_VALIDATION_TEXT,
            S.DESCRIPTION AS S_DESCRIPTION,
            AA.IS_VISIBLE,
            S.STATE,
            s.IS_FREE_SITE AS IS_FREE_SITE
        FROM
            ECOMM_NODE N
            INNER JOIN ECOMM_SITE S ON N.ID = s.NODE_ID
            INNER JOIN ECOMM_SITE_ACCESS SA ON S.ID = SA.SITE_ID
            INNER JOIN AUTH_ACCESS AA ON SA.ACCESS_ID = AA.ID
            INNER JOIN ECOMM_SUBSCRIPTIONFEE FEE ON FEE.SITEACCESS_ID = SA.ID
            INNER JOIN CODELOOKUP LOOKUP ON LOOKUP.ID = FEE.SUBSCRIPTION_TYP_ID
        WHERE
            S.ACTIVE='Y'    AND
            SA.ACTIVE = 'Y' AND
            AA.ACTIVE = 'Y' AND
            N.NAME = :nodeName
        ORDER BY AA.ACCESS_ORDER ASC
    </sql-query>

 <sql-query name="GET_SITES">
        SELECT
             s.ID AS s_ID
            ,s.NAME AS s_NAME
            ,s.DESCRIPTION AS s_DESCRIPTION
            ,s.COUNTY AS s_COUNTY
            ,s.STATE AS s_STATE
            ,s.AUTOACTIVATE AS s_AUTOACTIVATE
            ,s.TIMEZONE AS s_TIMEZONE
            ,s.ACTIVE AS s_ACTIVE
            ,node.name AS node_name
            ,node.Id AS node_Id
            ,node.description AS node_description
            ,CASE
                WHEN CUSTBANKDETAILS.ACCOUNT_NUM IS NULL THEN
                    'N'
                ELSE
                    'Y'
             END AS 'HAS_ACH_DETAILS'
             ,s.IS_FREE_SITE AS IS_FREE_SITE
        FROM
             ECOMM_SITE s
             inner join ECOMM_NODE node on node.ID = s.NODE_ID
             LEFT OUTER JOIN ECOMM_CUSTOMER_BANK_DETAILS CUSTBANKDETAILS ON CUSTBANKDETAILS.SITE_ID = S.ID
        WHERE
             node.ID = s.NODE_ID
        ORDER BY s.DESCRIPTION asc
    </sql-query>

 <sql-query name="GET_SUMMARY_INFO_FOR_SITE">
    SELECT
        S.ID AS S_ID,
        S.NAME AS S_NAME,
        S.DESCRIPTION AS S_DESCRIPTION,
        S.COUNTY AS S_COUNTY,
        S.STATE AS S_STATE,
        S.TIMEZONE AS S_TIMEZONE,
        S.ACTIVE AS S_ACTIVE,
        S.AUTOACTIVATE AS S_AUTOACTIVATE,
        AA.ID AS AA_ID,
        AA.ACCESS_CD AS AA_ACCESS_CD,
        AA.ACCESS_DESCR AS AA_ACCESS_DESCR,
        AA.ACTIVE AS AA_ACTIVE,
        LOOKUP.CATEGORY AS LOOKUP_CATEGORY,
        FEE.FEE AS FEE_FEE,
        FEE.TERM AS FEE_TERM,
        CUSAGFEE.TX_FEE_FLAT AS CUSAGFEE_TX_FEE_FLAT,
        CUSAGFEE.TX_FLAT_FEE_CUTOFF_AMT AS CUSAGFEE_TX_FLAT_FEE_CUTOFF_AMT,
        CUSAGFEE.ACTIVE AS CUSAGFEE_ACTIVE,
        CUSAGFEE.TX_FEE_PERCENT AS CUSAGFEE_TX_FEE_PERCENT,
        CUSAGFEE.DOWNGRADE_FEE AS CUSAGFEE_DOWNGRADE_FEE,
        NRF.ID AS NRF_ID,
        NRF.SITEACCESS_ID AS NRF_SITEACCESS,
        NRF.FEE_UNDER_PAGE_THRESHOLD AS NRF_FEE_UNDER_PAGE_THRESHOLD,
        NRF.PAGE_THRESHOLD AS NRF_PAGE_THRESHOLD,
        NRF.FEE_OVER_PAGE_THRESHOLD AS NRF_FEE_OVER_PAGE_THRESHOLD,
        NRF.IS_SERVICE_FEE AS NRF_IS_SERVICE_FEE,
        NRF.CURRENCY AS NRF_CURRENCY,
        NRF.ACTIVE AS NRF_ACTIVE,
        LOOKUP2.ID AS LOOKUP2_ID,
        LOOKUP2.CODE AS LOOKUP2_CODE,
        LOOKUP2.DESCRIPTION AS LOOKUP2_DESCRIPTION,
        LOOKUP.DESCRIPTION AS LOOKUP_DESCRIPTION,
        CUSAGFEE.TX_FEE_ADDITIONAL AS CUSAGFEE_TX_FEE_ADDITIONAL,
        PROFIT.CLIENT_SHARE AS PROFIT_CLIENT_SHARE,
        BANKDETAILS.FROM_FNAME AS BANKDETAILS_FROM_FNAME,
        BANKDETAILS.FROM_LNAME AS BANKDETAILS_FROM_LNAME,
        BANKDETAILS.FROM_MINITIAL AS BANKDETAILS_FROM_MINITIAL,
        BANKDETAILS.FROM_ADDRLINE1 AS BANKDETAILS_FROM_ADDRLINE1,
        BANKDETAILS.FROM_ADDRLINE2 AS BANKDETAILS_FROM_ADDRLINE2,
        BANKDETAILS.FROM_CITY AS BANKDETAILS_FROM_CITY,
        BANKDETAILS.FROM_STATE AS BANKDETAILS_FROM_STATE,
        BANKDETAILS.FROM_ZIPCODE AS BANKDETAILS_FROM_ZIPCODE,
        BANKDETAILS.FROM_PHONENUM AS BANKDETAILS_FROM_PHONENUM,
        BANKDETAILS.BANK_NAME AS BANKDETAILS_BANK_NAME,
        BANKDETAILS.BANK_CODE AS BANKDETAILS_BANK_CODE,
        BANKDETAILS.ROUTING_NUM AS BANKDETAILS_ROUTING_NUM,
        BANKDETAILS.ACCOUNT_NUM AS BANKDETAILS_ACCOUNT_NUM,
        BANKDETAILS.LAST_ISSUED_CHECK_NUM AS BANKDETAILS_LAST_ISSUED_CHECK_NUM,
        BANKDETAILS.BANK_ADDRLINE1 AS BANKDETAILS_BANK_ADDRLINE1,
        BANKDETAILS.BANK_ADDRLINE2 AS BANKDETAILS_BANK_ADDRLINE2,
        BANKDETAILS.BANK_CITY AS BANKDETAILS_BANK_CITY,
        BANKDETAILS.BANK_STATE AS BANKDETAILS_BANK_STATE,
        BANKDETAILS.BANK_ZIPCODE AS BANKDETAILS_BANK_ZIPCODE,
        BANKDETAILS.DATE_TIME_CREATED AS BANKDETAILS_DATE_TIME_CREATED,
        BANKDETAILS.DATE_TIME_MOD AS BANKDETAILS_DATE_TIME_MOD,
        BANKDETAILS.MOD_USER_ID AS BANKDETAILS_MOD_USER_ID,
        BANKDETAILS.ACTIVE  AS BANKDETAILS_ACTIVE,
        BANKDETAILS.CREATED_BY AS BANKDETAILS_CREATED_BY,
        BANKDETAILS.START_CHECK_NUM AS BANKDETAILS_START_CHECK_NUM,
        BANKDETAILS.END_CHECK_NUM AS BANKDETAILS_END_CHECK_NUM,
        S.NAME_ON_CHECK AS S_NAME_ON_CHECK,
        S.CHECK_HOLD_PERIOD AS S_CHECK_HOLD_PERIOD,
        CUSTBANKDETAILS.ACCOUNTNAME AS CUSTBANKDETAILS_ACCOUNTNAME,
        CUSTBANKDETAILS.ROUTING_NUM AS CUSTBANKDETAILS_ROUTING_NUM,
        CUSTBANKDETAILS.ACCOUNT_NUM AS CUSTBANKDETAILS_ACCOUNT_NUM,
        CUSTBANKDETAILS.BANK_ADDRLINE1 AS CUSTBANKDETAILS_BANK_ADDRLINE1,
        CUSTBANKDETAILS.BANK_ADDRLINE2 AS CUSTBANKDETAILS_BANK_ADDRLINE2,
        CUSTBANKDETAILS.BANK_CITY AS CUSTBANKDETAILS_BANK_CITY,
        CUSTBANKDETAILS.BANK_STATE AS CUSTBANKDETAILS_BANK_STATE,
        CUSTBANKDETAILS.BANK_ZIPCODE AS CUSTBANKDETAILS_BANK_ZIPCODE,
        CUSAGFEE.MICRO_TX_CUT_OFF,
        S.ENABLE_MICRO_TX_WEB,
        s.ENABLE_MICRO_TX_OTC,
        S.ACH_HOLD_PERIOD AS S_ACH_HOLD_PERIOD
    FROM
        ECOMM_SITE S
        LEFT OUTER JOIN ECOMM_SITE_ACCESS SA ON S.ID = SA.SITE_ID
        LEFT OUTER JOIN AUTH_ACCESS AA ON SA.ACCESS_ID = AA.ID
        LEFT OUTER JOIN ECOMM_SUBSCRIPTIONFEE FEE ON FEE.SITEACCESS_ID = SA.ID
        LEFT OUTER JOIN CODELOOKUP LOOKUP ON LOOKUP.ID = FEE.SUBSCRIPTION_TYP_ID
        LEFT OUTER JOIN ECOMM_CREDITUSAGE_FEE CUSAGFEE ON S.ID = CUSAGFEE.SITE_ID
        LEFT OUTER JOIN ECOMM_NON_RECURRING_FEE NRF ON NRF.SITEACCESS_ID = SA.ID
        LEFT OUTER JOIN CODELOOKUP LOOKUP2 ON LOOKUP2.ID = NRF.SUBSCRIPTION_TYP_ID
        LEFT OUTER JOIN ECOMM_PROFIT_SHARE PROFIT ON PROFIT.ACCESS_ID = AA.ID
        LEFT OUTER JOIN ECOMM_CUSTOMER_BANK_DETAILS CUSTBANKDETAILS ON CUSTBANKDETAILS.SITE_ID = S.ID
        INNER JOIN ECOMM_BANK_DETAILS BANKDETAILS ON BANKDETAILS.SITE_ID = S.ID
    WHERE
        S.id = :siteId
        </sql-query>

 <sql-query name="GET_SITE_DETAILS">
        SELECT
            s.ID AS s_ID,
            s.NAME AS s_NAME,
            s.DESCRIPTION AS s_DESCRIPTION,
            s.ACTIVE AS s_ACTIVE,
            s.COUNTY AS s_COUNTY,
            s.STATE AS s_STATE,
            s.AUTOACTIVATE AS s_AUTOACTIVATE,
            s.TIMEZONE AS s_TIMEZONE,
            s.NODE_ID AS s_NODE_ID,
            s.MOD_USER_ID AS s_MOD_USER_ID,
            at.ID AS at_ID,
            at.TERM_DESC AS at_TERM_DESC,
            at.MOD_USER_ID AS at_MOD_USER_ID,
            at.DEFAULT_FLG AS at_DEFAULT_FLG,
            at.TERM_TYP_ID AS at_TERM_TYP_ID,
            at.ACTIVE AS at_ACTIVE,
            mi.ID as mi_ID,
            mi.USERNAME AS mi_USERNAME,
            mi.PASSWORD AS mi_PASSWORD,
            mi.VENDORNAME AS mi_VENDORNAME,
            mi.PARTNER AS mi_PARTNER,
            cuf.ID as cuf_ID,
            cuf.TX_FEE_FLAT AS cuf_TX_FEE_FLAT,
            cuf.TX_FLAT_FEE_CUTOFF_AMT AS cuf_TX_FLAT_FEE_CUTOFF_AMT,
            cuf.TX_FEE_ADDITIONAL AS cuf_TX_FEE_ADDITIONAL,
            cuf.ACTIVE AS cuf_ACTIVE,
            cuf.DOWNGRADE_FEE AS cuf_DOWNGRADE_FEE,
            mgi.HOST_ID AS mgi_HOST_ID,
            mgi.HOST_PASSWORD AS mgi_HOST_PASSWORD,
            mgi.REGISTEREDBY AS mgi_REGISTEREDBY,
            mgi.ENCRYPTION_BLOCK_TYPE AS mgi_ENCRYPTION_BLOCK_TYPE,
            mgi.CARD_TYPE AS mgi_CARD_TYPE,
            mgi.OUTPUT_FORMAT_CODE AS mgi_OUTPUT_FORMAT_CODE,
            mgi.ACTIVE AS mgi_ACTIVE,
            mgi.DATE_TIME_CREATED AS mgi_DATE_TIME_CREATED,
            mgi.DATE_TIME_MOD AS mgi_DATE_TIME_MOD,
            mgi.MOD_USER_ID AS mgi_MOD_USER_ID,
            cuf.TX_FEE_PERCENT AS cuf_TX_FEE_PERCENT,
            s.CREATED_BY AS s_CREATED_BY,
            at.CREATED_BY AS at_CREATED_BY,
            mi.CREATED_BY AS mi_CREATED_BY,
            cuf.CREATED_BY AS cuf_CREATED_BY,
            mgi.CREATED_BY AS mgi_CREATED_BY,
            mi.TRAN_FEE_PERCENTAGE AS mi_TRAN_FEE_PERCENTAGE,
            mi.TRAN_FEE_FLAT AS mi_TRAN_FEE_FLAT,
            mi.TRAN_FEE_PERCENTAGE_AMEX AS mi_TRAN_FEE_PERCENTAGE_AMEX,
            mi.TRAN_FEE_FLAT_AMEX AS mi_TRAN_FEE_FLAT_AMEX,
            s.IS_FIRM_NUMBER_REQUIRED s_IS_FIRM_NUMBER_REQUIRED,
            s.IS_BAR_NUMBER_REQUIRED s_IS_BAR_NUMBER_REQUIRED,
            s.IS_FREE_SITE s_IS_FREE_SITE,
            s.REVENUE_THRESHOLD_AMOUNT AS s_REVENUE_THRESHOLD_AMOUNT,
            s.REVENUE_THRESHOLD_START_DATE AS s_REVENUE_THRESHOLD_START_DATE
        FROM
            ECOMM_SITE s,
            AUTH_TERMS at,
            ECOMM_MERCHANTINFO mi,
            ECOMM_CREDITUSAGE_FEE cuf,
            ECOMM_MAGENSAINFO mgi
        WHERE
            s.ID = at.SITE_ID AND
            mi.SITE_ID = s.ID AND
            s.ID = cuf.SITE_ID AND
            mgi.SITE_ID = s.ID AND
            s.Id = :siteId
    </sql-query>

 <sql-query name="GET_SITE_DETAILS_BY_NAME">
        SELECT
            s.ID as s_ID,
            s.NAME AS s_NAME,
            s.DESCRIPTION AS s_DESCRIPTION,
            s.ACTIVE AS s_ACTIVE,
            s.COUNTY AS s_COUNTY,
            s.STATE AS s_STATE,
            s.AUTOACTIVATE AS s_AUTOACTIVATE,
            s.TIMEZONE AS s_TIMEZONE,
            s.MOD_USER_ID AS s_MOD_USER_ID,
            s.ENABLE_MICRO_TX_OTC AS s_ENABLE_MICRO_TX_OTC,
            s.ENABLE_MICRO_TX_WEB AS s_ENABLE_MICRO_TX_WEB,
            at.ID AS at_ID,
            at.TERM_DESC AS at_TERM_DESC,
            at.MOD_USER_ID AS at_MOD_USER_ID,
            at.DEFAULT_FLG AS at_DEFAULT_FLG,
            at.ACTIVE AS at_ACTIVE,
            mi.ID AS mi_ID,
            mi.USERNAME AS mi_USERNAME,
            mi.PASSWORD AS mi_PASSWORD,
            mi.VENDORNAME AS mi_VENDORNAME,
            mi.PARTNER AS mi_PARTNER,
            mi.IS_MICROPAYMENT_ACCOUNT AS mi_IS_MICROPAYMENT_ACCOUNT,
            cuf.ID AS cuf_ID,
            cuf.TX_FEE_FLAT AS cuf_TX_FEE_FLAT,
            cuf.TX_FLAT_FEE_CUTOFF_AMT AS cuf_TX_FLAT_FEE_CUTOFF_AMT,
            cuf.TX_FEE_ADDITIONAL AS cuf_TX_FEE_ADDITIONAL,
            cuf.ACTIVE AS cuf_ACTIVE,
            cuf.DOWNGRADE_FEE AS cuf_DOWNGRADE_FEE,
            cuf.MICRO_TX_CUT_OFF AS cuf_MICRO_TX_CUT_OFF,
            mgi.HOST_ID AS mgi_HOST_ID,
            mgi.HOST_PASSWORD AS mgi_HOST_PASSWORD,
            mgi.REGISTEREDBY AS mgi_REGISTEREDBY,
            mgi.ENCRYPTION_BLOCK_TYPE AS mgi_ENCRYPTION_BLOCK_TYPE,
            mgi.CARD_TYPE AS mgi_CARD_TYPE,
            mgi.OUTPUT_FORMAT_CODE AS mgi_OUTPUT_FORMAT_CODE,
            mgi.ACTIVE AS mgi_ACTIVE,
            cuf.TX_FEE_PERCENT AS cuf_TX_FEE_PERCENT,
            wpf.ID AS wpf_ID,
            wpf.TX_FEE_FLAT AS wpf_TX_FEE_FLAT,
            wpf.TX_FLAT_FEE_CUTOFF_AMT AS wpf_TX_FLAT_FEE_CUTOFF_AMT,
            wpf.TX_FEE_PERCENT AS wpf_TX_FEE_PERCENT,
            wpf.TX_FEE_ADDITIONAL AS wpf_TX_FEE_ADDITIONAL,
            wpf.ACTIVE AS wpf_ACTIVE,
            wpf.MICRO_TX_CUT_OFF AS wpf_MICRO_TX_CUT_OFF,
            s.CREATED_BY AS s_CREATED_BY,
            at.CREATED_BY AS at_CREATED_BY,
            mi.CREATED_BY AS mi_CREATED_BY,
            cuf.CREATED_BY AS cuf_CREATED_BY,
            wpf.CREATED_BY AS wpf_CREATED_BY,
            mgi.CREATED_BY AS mgi_CREATED_BY,
            mi.TRAN_FEE_PERCENTAGE AS mi_TRAN_FEE_PERCENTAGE,
            mi.TRAN_FEE_FLAT AS mi_TRAN_FEE_FLAT,
            s.SEARCH_DAY_THRESHOLD AS s_SEARCH_DAY_THRESHOLD,
            mi.TRAN_FEE_PERCENTAGE_AMEX AS mi_TRAN_FEE_PERCENTAGE_AMEX,
            mi.TRAN_FEE_FLAT_AMEX AS mi_TRAN_FEE_FLAT_AMEX
        FROM
            ECOMM_SITE s,
            AUTH_TERMS at,
            ECOMM_MERCHANTINFO mi,
            ECOMM_CREDITUSAGE_FEE cuf,
            ECOMM_WEBPAYMENT_FEE wpf,
            ECOMM_MAGENSAINFO mgi
        WHERE
            s.ID = at.SITE_ID AND
            mi.SITE_ID = s.ID AND
            s.ID = cuf.SITE_ID AND
            s.ID = wpf.SITE_ID AND
            mgi.SITE_ID = s.ID AND
            s.NAME = :siteName
    </sql-query>

 <sql-query name="GET_SITE_CONFIGURATION">
        SELECT
            sc.ID AS sc_ID,
            sc.SITE_ID AS sc_SITE_ID,
            sc.EMAIL_TEMPLATE_FOLDER AS sc_EMAIL_TEMPLATE_FOLDER,
            sc.FROM_EMAIL_ADDRESS AS sc_FROM_EMAIL_ADDRESS,
            sc.PAYMENT_CONF_SUB AS sc_PAYMENT_CONF_SUB,
            sc.CHANGE_SUBSCRIPTION_SUB AS sc_CHANGE_SUBSCRIPTION_SUB,
            sc.CANCEL_SUBSCRIPTION_SUB AS sc_CANCEL_SUBSCRIPTION_SUB,
            sc.REACTIVATE_SUBSCRIPTION_SUB AS sc_REACTIVATE_SUBSCRIPTION_SUB,
            sc.RECURRING_PAYMENT_SUCCESS_SUB AS sc_RECURRING_PAYMENT_SUCCESS_SUB,
            sc.RECURRING_PAYMENT_UNSUCCESSFUL_SUB AS sc_RECURRING_PAYMENT_UNSUCCESSFUL_SUB,
            sc.PAYMENT_CONF_TEMPLATE AS sc_PAYMENT_CONF_TEMPLATE,
            sc.CHANGE_SUBSCRIPTION_TEMPLATE AS sc_CHANGE_SUBSCRIPTION_TEMPLATE,
            sc.CANCEL_SUBSCRIPTION_TEMPLATE AS sc_CANCEL_SUBSCRIPTION_TEMPLATE,
            sc.REACTIVATE_CANCELLED_SUBSCRIPTION_TEMPLATE AS sc_REACTIVATE_CANCELLED_SUBSCRIPTION_TEMPLATE,
            sc.RECURRING_PAYMENT_SUCCESS_TEMPLATE AS sc_RECURRING_PAYMENT_SUCCESS_TEMPLATE,
            sc.RECURRING_PAYMENT_UNSUCCESSFUL_TEMPLATE AS sc_RECURRING_PAYMENT_UNSUCCESSFUL_TEMPLATE,
            sc.DATE_TIME_CREATED AS sc_DATE_TIME_CREATED,
            sc.DATE_TIME_MOD AS sc_DATE_TIME_MOD,
            sc.MOD_USER_ID AS sc_MOD_USER_ID,
            sc.ACTIVE AS sc_ACTIVE,
            sc.WEB_PAYMENT_CONFIRMATION_SUB AS sc_WEB_PAYMENT_CONFIRMATION_SUB,
            sc.WEB_PAYMENT_CONFIRMATION_TEMPLATE AS sc_WEB_PAYMENT_CONFIRMATION_TEMPLATE,
            site.Name AS site_Name,
            sc.REMOVE_SUBSCRIPTION_SUB AS sc_REMOVE_SUBSCRIPTION_SUB,
            sc.REMOVE_SUBSCRIPTION_TEMPLATE AS sc_REMOVE_SUBSCRIPTION_TEMPLATE,
            sc.CREATED_BY AS sc_CREATED_BY,
            sc.ACCESS_AUTHORIZATION_SUB AS sc_ACCESS_AUTHORIZATION_SUB,
            sc.ACCESS_AUTHORIZATION_TEMPLATE AS sc_ACCESS_AUTHORIZATION_TEMPLATE,
            sc.PAYASUGO_PAYMENT_CONFIRMATION_SUB AS sc_PAYASUGO_PAYMENT_CONFIRMATION_SUB,
            sc.PAYASUGO_PAYMENT_CONFIRMATION_TEMPLATE AS sc_PAYASUGO_PAYMENT_CONFIRMATION_TEMPLATE,
            sc.ADD_SUBSCRIPTION_SUB as sc_ADD_ADD_SUBSCRIPTION_SUB,
            sc.PAYASUGO_PAYMENT_CONFIRMATION_TEMPLATE AS sc_PAYASUGO_PAYMENT_CONFIRMATION_TEMPLATE,
            sc.ADD_SUBSCRIPTION_SUB as sc_ADD_ADD_SUBSCRIPTION_SUB,
            sc.EXPIRED_OVERRIDDEN_SUBSCRIPTION_NOTIFICATION_SUB AS sc_EXPIRED_OVERRIDDEN_SUBSCRIPTION_NOTIFICATION_SUB,
            sc.EXPIRED_OVERRIDDEN_SUBSCRIPTION_NOTIFICATION_TEMPLATE as sc_EXPIRED_OVERRIDDEN_SUBSCRIPTION_NOTIFICATION_TEMPLATE
        FROM
            SITE_CONFIGURATION sc,
            ECOMM_SITE site
        WHERE
            sc.SITE_ID = site.ID AND
            sc.SITE_ID = :siteId
    </sql-query>

 <sql-query name="GET_NODE_CONFIGURATION">
        SELECT
            nc.ID AS nc_ID,
            NODE.ID AS NODE_ID,
            NODE.DESCRIPTION AS NODE_DESCRIPTION,
            nc.EMAIL_TEMPLATE_FOLDER AS nc_EMAIL_TEMPLATE_FOLDER,
            nc.FROM_EMAIL_ADDRESS AS nc_FROM_EMAIL_ADDRESS,
            nc.RESET_PASSWORD_SUB AS nc_RESET_PASSWORD_SUB,
            nc.USER_ACTIVATION_SUB AS nc_USER_ACTIVATION_SUB,
            nc.RESET_PASSWORD_TEMPLATE AS nc_RESET_PASSWORD_TEMPLATE,
            nc.USER_ACTIVATION_TEMPLATE AS nc_USER_ACTIVATION_TEMPLATE,
            nc.DATE_TIME_CREATED AS nc_DATE_TIME_CREATED,
            nc.DATE_TIME_MOD AS nc_DATE_TIME_MOD,
            nc.MOD_USER_ID AS nc_MOD_USER_ID,
            nc.ACTIVE AS nc_ACTIVE,
            nc.LOCK_USER_SUB AS nc_LOCK_USER_SUB,
            nc.LOCK_USER_TEMPLATE AS nc_LOCK_USER_TEMPLATE,
            nc.UNLOCK_USER_SUB AS nc_UNLOCK_USER_SUB,
            nc.UNLOCK_USER_TEMPLATE AS nc_UNLOCK_USER_TEMPLATE,
            nc.ALERT_SUBJECT AS nc_ALERT_SUBJECT,
            nc.ALERT_TEMPLATE AS nc_ALERT_TEMPLATE,
            nc.CREATED_BY AS nc_CREATED_BY,
            nc.INACTIVE_USER_NOTIF_SUB AS nc_INACTIVE_USER_NOTIF_SUB,
            nc.INACTIVE_USER_NOTIF_TEMPLATE AS nc_INACTIVE_USER_NOTIF_TEMPLATE
        FROM NODE_CONFIGURATION nc
            INNER JOIN ECOMM_NODE NODE ON nc.NODE_ID = NODE.ID
        WHERE NODE.NAME = :nodeName
    </sql-query>

 <sql-query name="GET_ACCESS_LIST_WITH_RECURRING_FEE">
    SELECT
       nrf.ID AS nrf_ID
      ,nrf.SUBSCRIPTION_TYP_ID AS nrf_SUBSCRIPTION_TYP_ID
      ,CL.CODE AS CL_CODE
      ,AA.ID AS AA_ID
      ,nrf.FEE_UNDER_PAGE_THRESHOLD AS nrf_FEE_UNDER_PAGE_THRESHOLD
      ,nrf.PAGE_THRESHOLD AS nrf_PAGE_THRESHOLD
      ,nrf.FEE_OVER_PAGE_THRESHOLD AS nrf_FEE_OVER_PAGE_THRESHOLD
      ,nrf.IS_SERVICE_FEE AS nrf_IS_SERVICE_FEE
      ,nrf.CURRENCY AS nrf_CURRENCY
      ,nrf.ACTIVE AS nrf_ACTIVE
      ,nrf.DATE_TIME_CREATED AS nrf_DATE_TIME_CREATED
      ,nrf.DATE_TIME_MOD AS nrf_DATE_TIME_MOD
      ,nrf.MOD_USER_ID AS nrf_MOD_USER_ID
      ,aa.ACCESS_CD AS aa_ACCESS_CD
      ,nrf.CREATED_BY AS nrf_CREATED_BY
      ,aa.IS_FIRM_LEVEL_ACCESS AS AA_IS_FIRM_LEVEL_ACCESS
      ,aa.MAX_USERS_ALLOWED AS AA_MAX_USERS_ALLOWED
      ,aa.MAX_DOCUMENTS_ALLOWED AS AA_MAX_DOCUMENTS_ALLOWED
      ,(SELECT site.IS_SUM_TXAMOUNT_PLUS_SERVICEFEE FROM ECOMM_SITE site WHERE site.ID = sa.SITE_ID) AS sumTxamountPlusServiceFee
      ,aa.IS_GOVERNMENT_ACCESS AS AA_IS_GOVERNMENT_ACCESS
   FROM  ECOMM_NON_RECURRING_FEE nrf,
        CODELOOKUP CL,
        AUTH_ACCESS aa,
        ECOMM_SITE_ACCESS sa
   WHERE CL.ID = nrf.SUBSCRIPTION_TYP_ID AND
         nrf.SITEACCESS_ID = sa.ID  AND
         sa.ACCESS_ID = AA.ID AND
         aa.ACCESS_CD IN :accessCodeList
    </sql-query>

 <sql-query callable="true" name="GET_GETCHECKHISTORY">
        {call SP_CHECK_GET_HISTORY (:siteId, :fromDate, :toDate) }
    </sql-query>

 <sql-query callable="true" name="DO_VOIDCHECK">
        {call SP_CHECK_DO_VOID (:checkNumber, :comments) }
    </sql-query>

 <sql-query name="GET_CHECK_DETAILS">
   SELECT
        SITE.NAME AS SITE_NAME
        ,HIST.ID AS HIST_ID
        ,HIST.CHECKNUM AS HIST_CHECKNUM
        ,HIST.PAYMENT_TYPE AS HIST_PAYMENT_TYPE
        ,HIST.TOTAL_TRANSACTIONS AS HIST_TOTAL_TRANSACTIONS
        ,HIST.AMOUNT AS HIST_AMOUNT
        ,EB.BANK_NAME AS EB_BANK_NAME
        ,HIST.IS_VOIDED AS HIST_IS_VOIDED
        ,HIST.DATE_TIME_CREATED AS HIST_DATE_TIME_CREATED
        ,HIST.DATE_TIME_MOD AS HIST_DATE_TIME_MOD
        ,HIST.MOD_USER_ID AS HIST_MOD_USER_ID
        ,HIST.MACHINENAME AS HIST_MACHINENAME
        ,HIST.ACTIVE AS HIST_ACTIVE
        ,HIST.COMMENTS AS HIST_COMMENTS
        ,HIST.CREATED_BY AS HIST_CREATED_BY
    FROM
        ECOMM_CHECK_HIST HIST
        INNER JOIN ECOMM_BANK_DETAILS EB ON HIST.BANK_ID = EB.ID
        INNER JOIN ECOMM_SITE SITE ON SITE.ID = EB.SITE_ID
   WHERE
       HIST.CHECKNUM = :checkNumber
    </sql-query>

 <sql-query name="GET_RECEIPT_CONFIGURATION_FOR_SITE">
    SELECT
       receiptConf.ID AS receiptConf_ID
      ,receiptConf.BUSINESSNAME AS receiptConf_BUSINESSNAME
      ,receiptConf.ADDRESS_LINE_1 AS receiptConf_ADDRESS_LINE_1
      ,receiptConf.ADDRESS_LINE_2 AS receiptConf_ADDRESS_LINE_2
      ,receiptConf.CITY AS receiptConf_CITY
      ,receiptConf.STATE AS receiptConf_STATE
      ,receiptConf.ZIP AS receiptConf_ZIP
      ,receiptConf.PHONE AS receiptConf_PHONE
      ,receiptConf.COMMENTS_1 AS receiptConf_COMMENTS_1
      ,receiptConf.COMMENTS_2 AS receiptConf_COMMENTS_2
      ,receiptConf.TYPE AS receiptConf_TYPE
      ,receiptConf.ACTIVE AS receiptConf_ACTIVE
      ,receiptConf.DATE_TIME_CREATED AS receiptConf_DATE_TIME_CREATED
      ,receiptConf.DATE_TIME_MOD AS receiptConf_DATE_TIME_MOD
      ,receiptConf.MOD_USER_ID AS receiptConf_MOD_USER_ID
      ,receiptConf.SITE_ID AS receiptConf_SITE_ID
      ,receiptConf.CREATED_BY AS receiptConf_CREATED_BY
  FROM
        ECOMM_RECEIPT_CONFIGURATION receiptConf INNER JOIN ECOMM_SITE site
  ON
        site.ID = receiptConf.SITE_ID
  WHERE site.ID = :siteId
    </sql-query>

 <sql-query name="GET_RECEIPT_CONFIGURATION_FOR_SITE_NAME_AND_PAYMENT_TYPE">
    SELECT
       receiptConf.ID AS receiptConf_ID
      ,receiptConf.BUSINESSNAME AS receiptConf_BUSINESSNAME
      ,receiptConf.ADDRESS_LINE_1 AS receiptConf_ADDRESS_LINE_1
      ,receiptConf.ADDRESS_LINE_2 AS receiptConf_ADDRESS_LINE_2
      ,receiptConf.CITY AS receiptConf_CITY
      ,receiptConf.STATE AS receiptConf_STATE
      ,receiptConf.ZIP AS receiptConf_ZIP
      ,receiptConf.PHONE AS receiptConf_PHONE
      ,receiptConf.COMMENTS_1 AS receiptConf_COMMENTS_1
      ,receiptConf.COMMENTS_2 AS receiptConf_COMMENTS_2
      ,receiptConf.TYPE AS receiptConf_TYPE
      ,receiptConf.ACTIVE AS receiptConf_ACTIVE
      ,receiptConf.DATE_TIME_CREATED AS receiptConf_DATE_TIME_CREATED
      ,receiptConf.DATE_TIME_MOD AS receiptConf_DATE_TIME_MOD
      ,receiptConf.MOD_USER_ID AS receiptConf_MOD_USER_ID
      ,receiptConf.SITE_ID AS receiptConf_SITE_ID
      ,receiptConf.CREATED_BY AS receiptConf_CREATED_BY
  FROM
        ECOMM_RECEIPT_CONFIGURATION receiptConf INNER JOIN ECOMM_SITE site
  ON
        site.ID = receiptConf.SITE_ID
  WHERE site.NAME = :siteName
  AND   receiptConf.TYPE = :paymentType
    </sql-query>

 <sql-query name="GET_RECEIPT_CONFIGURATION_DETAIL">
    SELECT
       receiptConf.ID AS receiptConf_ID
      ,receiptConf.BUSINESSNAME AS receiptConf_BUSINESSNAME
      ,receiptConf.ADDRESS_LINE_1 AS receiptConf_ADDRESS_LINE_1
      ,receiptConf.ADDRESS_LINE_2 AS receiptConf_ADDRESS_LINE_2
      ,receiptConf.CITY AS receiptConf_CITY
      ,receiptConf.STATE AS receiptConf_STATE
      ,receiptConf.ZIP AS receiptConf_ZIP
      ,receiptConf.PHONE AS receiptConf_PHONE
      ,receiptConf.COMMENTS_1 AS receiptConf_COMMENTS_1
      ,receiptConf.COMMENTS_2 AS receiptConf_COMMENTS_2
      ,receiptConf.TYPE AS receiptConf_TYPE
      ,receiptConf.ACTIVE AS receiptConf_ACTIVE
      ,receiptConf.DATE_TIME_CREATED AS receiptConf_DATE_TIME_CREATED
      ,receiptConf.DATE_TIME_MOD AS receiptConf_DATE_TIME_MOD
      ,receiptConf.MOD_USER_ID AS receiptConf_MOD_USER_ID
      ,receiptConf.SITE_ID AS receiptConf_SITE_ID
      ,receiptConf.CREATED_BY AS receiptConf_CREATED_BY
  FROM
        ECOMM_RECEIPT_CONFIGURATION receiptConf
  WHERE
        receiptConf.ID =:receiptConfId
    </sql-query>

 <sql-query name="GET_CODES">
    SELECT DISTINCT
        CL.ID AS CL_ID,
        CL.CODE AS CL_CODE,
        CL.DESCRIPTION AS CL_DESCRIPTION,
        CL.ACTIVE AS CL_ACTIVE,
        CL.DATE_TIME_CREATED AS CL_DATE_TIME_CREATED,
        CL.DATE_TIME_MOD AS CL_DATE_TIME_MOD,
        CL.MOD_USER_ID AS CL_MOD_USER_ID,
        CL.CATEGORY AS CL_CATEGORY,
        CL.CREATED_BY AS CL_CREATED_BY
    FROM CODELOOKUP CL
    WHERE CATEGORY = :codeCategory AND ACTIVE = 'Y'
    </sql-query>

 <sql-query name="GET_ERROR_LOG_BY_DATE">
			SELECT
			EL.ID AS EL_ID,
			EL.ERR_CODE AS EL_ERR_CODE,
			EL.ERR_DESCRIPTION AS EL_ERR_DESCRIPTION,
			EL.MODULE_NAME AS EL_MODULE_NAME,
			EL.FUNCTION_NAME AS EL_FUNCTION_NAME, 
			EL.DATE_TIME_CREATED AS EL_DATE_TIME_CREATED,
			EL.DATE_TIME_MOD AS EL_DATE_TIME_MOD,
			EL.MOD_USER_ID AS EL_MOD_USER_ID,
			EL.ACTIVE AS EL_ACTIVE,
			EL.USER_NAME AS EL_USER_NAME,
			EL.CREATED_BY AS EL_CREATED_BY
		FROM ERROR_LOG EL
		WHERE 
		convert(DATE, DATE_TIME_CREATED, 101) &gt;= :fromDate
		AND convert(DATE, DATE_TIME_CREATED, 101) &lt;= :toDate
		AND USER_NAME LIKE :userName
		ORDER BY DATE_TIME_CREATED DESC
		OFFSET :offsetRows ROWS
		FETCH NEXT :numberOfRows ROWS ONLY
</sql-query>

 <sql-query name="GET_ERROR_LOG_BY_DATE_COUNT">
			SELECT COUNT(EL.ID) AS ERROR_COUNT
		FROM ERROR_LOG EL
		WHERE 
		convert(DATE, DATE_TIME_CREATED, 101) &gt;= :fromDate
		AND convert(DATE, DATE_TIME_CREATED, 101) &lt;= :toDate
		AND USER_NAME LIKE :userName
</sql-query>

 <sql-query callable="true" name="GET_USERS_BY_ACCESSID">
        {call SP_USERS_GET_BY_ACCESSID  (:accessId) }
    </sql-query>

 <sql-query name="GET_BANK_DETAILS">
    SELECT EB.ID AS EB_ID
        ,EB.SITE_ID AS EB_SITE_ID
        ,EB.FROM_FNAME AS EB_FROM_FNAME
        ,EB.FROM_LNAME AS EB_FROM_LNAME
        ,EB.FROM_MINITIAL AS EB_FROM_MINITIAL
        ,EB.FROM_ADDRLINE1 AS EB_FROM_ADDRLINE1
        ,EB.FROM_ADDRLINE2 AS EB_FROM_ADDRLINE2
        ,EB.FROM_CITY AS EB_FROM_CITY
        ,EB.FROM_STATE AS EB_FROM_STATE
        ,EB.FROM_ZIPCODE AS EB_FROM_ZIPCODE
        ,EB.FROM_PHONENUM AS EB_FROM_PHONENUM
        ,EB.BANK_NAME AS EB_BANK_NAME
        ,EB.BANK_CODE AS EB_BANK_CODE
        ,EB.ROUTING_NUM AS EB_ROUTING_NUM
        ,EB.CCOUNT_NUM AS EB_CCOUNT_NUM
        ,EB.LAST_ISSUED_CHECK_NUM AS EB_LAST_ISSUED_CHECK_NUM
        ,EB.BANK_ADDRLINE1 AS EB_BANK_ADDRLINE1
        ,EB.BANK_ADDRLINE2 AS EB_BANK_ADDRLINE2
        ,EB.BANK_CITY AS EB_BANK_CITY
        ,EB.BANK_STATE AS EB_BANK_STATE
        ,EB.BANK_ZIPCODE AS EB_BANK_ZIPCODE
        ,EB.DATE_TIME_CREATED AS EB_DATE_TIME_CREATED
        ,EB.DATE_TIME_MOD AS EB_DATE_TIME_MOD
        ,EB.MOD_USER_ID AS EB_MOD_USER_ID
        ,EB.ACTIVE AS EB_ACTIVE
        ,EB.CREATED_BY AS EB_CREATED_BY
        ,EB.START_CHECK_NUM AS EB_START_CHECK_NUM
        ,EB.END_CHECK_NUM AS EB_END_CHECK_NUM
    FROM ECOMM_BANK_DETAILS EB
    WHERE SITE_ID = :siteId
    </sql-query>

 <sql-query name="GET_MERCHANT_DETAILS">
    SELECT MERCHANT.ID AS MERCHANT_ID
        ,MERCHANT.SITE_ID AS MERCHANT_SITE_ID
        ,MERCHANT.DATE_TIME_CREATED AS MERCHANT_DATE_TIME_CREATED
        ,MERCHANT.DATE_TIME_MOD AS MERCHANT_DATE_TIME_MOD
        ,MERCHANT.MOD_USER_ID AS MERCHANT_MOD_USER_ID
        ,MERCHANT.IS_MICROPAYMENT_ACCOUNT AS MERCHANT_IS_MICROPAYMENT_ACCOUNT
        ,MERCHANT.CREATED_BY AS MERCHANT_CREATED_BY
        ,MERCHANT.TRAN_FEE_PERCENTAGE AS MERCHANT_TRAN_FEE_PERCENTAGE
        ,MERCHANT.TRAN_FEE_FLAT AS MERCHANT_TRAN_FEE_FLAT
        ,MERCHANT.TRAN_FEE_PERCENTAGE_AMEX AS MERCHANT_TRAN_FEE_PERCENTAGE_AMEX
        ,MERCHANT.TRAN_FEE_FLAT_AMEX AS MERCHANT_TRAN_FEE_FLAT_AMEX
    FROM ECOMM_MERCHANTINFO MERCHANT
    WHERE MERCHANT.SITE_ID = :siteId
    </sql-query>

 <sql-query name="DELETE_ALL_FROM_ERROR_LOG">
    DELETE FROM ERROR_LOG
 </sql-query>

 <sql-query name="DELETE_FROM_ERROR_LOG_BY_ID">
    DELETE FROM ERROR_LOG WHERE ID = :errorLogId
 </sql-query>

 	<sql-query name="GET_USER_COUNTS_FOR_ALL_SITE">

		SELECT
            USERCOUNT AS 'userCount',
            SITE_DESCRIPTION AS 'description',
            SITE_ID AS 'key'
        FROM
            V_GET_USERCOUNTS_BY_SITE

    </sql-query>

 <sql-query name="GET_USERCOUNTS_FOR_SITE">
        SELECT
            USERCOUNT AS 'userCount',
            SITE_DESCRIPTION AS 'description',
            SITE_ID AS 'key'
        FROM
            V_GET_USERCOUNTS_BY_SITE
        WHERE
            SITE_ID = :siteId
        ORDER BY
            SITE_DESCRIPTION ASC
    </sql-query>

 <sql-query name="GET_USERCOUNTS_BY_SUB_FOR_A_SITE">
        SELECT
            USERCOUNT AS 'userCount',
            ACCESS_DESCRIPTION AS 'description',
            ACCESS_ID AS 'key'
        FROM
            V_GET_USERCOUNTS_BY_SUBSCRIPTION
        WHERE SITE_ID = :siteId
        ORDER BY
            ACCESS_DESCRIPTION ASC
    </sql-query>

 <sql-query callable="true" name="GET_USERDIST_BY_SUBSCRIPTION">
        {call SP_USER_GET_DISTRIBUTION_FOR_SUBSCRIPTION  (:siteId, :accessId) }
    </sql-query>

 <sql-query callable="true" name="LOOKUP_TRANSACTION">
        {call SP_COMMON_GET_TX_DETAILS (:productId, :productName, :productType, :invoiceId, :txRefNumber, :accountName, :accountNumber, :transStartDate, :transEndDate, :paymentChannel, :siteName, :startFrom, :numberOfRecords, :count)}
 </sql-query>

  <sql-query name="GET_SITE_ADMIN_DETAILS">
    SELECT
        S.ID AS S_ID,
        S.NAME AS S_NAME,
        S.DESCRIPTION AS S_DESCRIPTION,
        S.COUNTY AS S_COUNTY,
        S.STATE AS S_STATE,
        S.TIMEZONE AS S_TIMEZONE,
        S.ACTIVE AS S_ACTIVE,
        S.AUTOACTIVATE AS S_AUTOACTIVATE,
        AA.ID AS AA_ID,
        AA.ACCESS_CD AS AA_ACCESS_CD,
        AA.ACCESS_DESCR AS AA_ACCESS_DESCR,
        AA.ACTIVE AS AA_ACTIVE,
        LOOKUP.CATEGORY AS LOOKUP_CATEGORY,
        FEE.FEE AS FEE_FEE,
        FEE.TERM AS FEE_TERM,
        CUSAGFEE.TX_FEE_FLAT AS CUSAGFEE_TX_FEE_FLAT,
        CUSAGFEE.TX_FLAT_FEE_CUTOFF_AMT AS CUSAGFEE_TX_FLAT_FEE_CUTOFF_AMT,
        CUSAGFEE.ACTIVE AS CUSAGFEE_ACTIVE,
        CUSAGFEE.TX_FEE_PERCENT AS CUSAGFEE_TX_FEE_PERCENT,
        CUSAGFEE.DOWNGRADE_FEE AS CUSAGFEE_DOWNGRADE_FEE,
        NRF.ID AS NRF_ID,
        NRF.SITEACCESS_ID AS NRF_SITEACCESS,
        NRF.FEE_UNDER_PAGE_THRESHOLD AS NRF_FEE_UNDER_PAGE_THRESHOLD,
        NRF.PAGE_THRESHOLD AS NRF_PAGE_THRESHOLD,
        NRF.FEE_OVER_PAGE_THRESHOLD AS NRF_FEE_OVER_PAGE_THRESHOLD,
        NRF.IS_SERVICE_FEE AS NRF_IS_SERVICE_FEE,
        NRF.CURRENCY AS NRF_CURRENCY,
        NRF.ACTIVE AS NRF_ACTIVE,
        LOOKUP2.ID AS LOOKUP2_ID,
        LOOKUP2.CODE AS LOOKUP2_CODE,
        LOOKUP2.DESCRIPTION AS LOOKUP2_DESCRIPTION,
        LOOKUP.DESCRIPTION AS LOOKUP_DESCRIPTION,
        CUSAGFEE.TX_FEE_ADDITIONAL AS CUSAGFEE_TX_FEE_ADDITIONAL,
        PROFIT.CLIENT_SHARE AS PROFIT_CLIENT_SHARE,
        BANKDETAILS.FROM_FNAME AS BANKDETAILS_FROM_FNAME,
        BANKDETAILS.FROM_LNAME AS BANKDETAILS_FROM_LNAME,
        BANKDETAILS.FROM_MINITIAL AS BANKDETAILS_FROM_MINITIAL,
        BANKDETAILS.FROM_ADDRLINE1 AS BANKDETAILS_FROM_ADDRLINE1,
        BANKDETAILS.FROM_ADDRLINE2 AS BANKDETAILS_FROM_ADDRLINE2,
        BANKDETAILS.FROM_CITY AS BANKDETAILS_FROM_CITY,
        BANKDETAILS.FROM_STATE AS BANKDETAILS_FROM_STATE,
        BANKDETAILS.FROM_ZIPCODE AS BANKDETAILS_FROM_ZIPCODE,
        BANKDETAILS.FROM_PHONENUM AS BANKDETAILS_FROM_PHONENUM,
        BANKDETAILS.BANK_NAME AS BANKDETAILS_BANK_NAME,
        BANKDETAILS.BANK_CODE AS BANKDETAILS_BANK_CODE,
        BANKDETAILS.ROUTING_NUM AS BANKDETAILS_ROUTING_NUM,
        BANKDETAILS.ACCOUNT_NUM AS BANKDETAILS_ACCOUNT_NUM,
        BANKDETAILS.LAST_ISSUED_CHECK_NUM AS BANKDETAILS_LAST_ISSUED_CHECK_NUM,
        BANKDETAILS.BANK_ADDRLINE1 AS BANKDETAILS_BANK_ADDRLINE1,
        BANKDETAILS.BANK_ADDRLINE2 AS BANKDETAILS_BANK_ADDRLINE2,
        BANKDETAILS.BANK_CITY AS BANKDETAILS_BANK_CITY,
        BANKDETAILS.BANK_STATE AS BANKDETAILS_BANK_STATE,
        BANKDETAILS.BANK_ZIPCODE AS BANKDETAILS_BANK_ZIPCODE,
        BANKDETAILS.DATE_TIME_CREATED AS BANKDETAILS_DATE_TIME_CREATED,
        BANKDETAILS.DATE_TIME_MOD AS BANKDETAILS_DATE_TIME_MOD,
        BANKDETAILS.MOD_USER_ID AS BANKDETAILS_MOD_USER_ID,
        BANKDETAILS.ACTIVE  AS BANKDETAILS_ACTIVE,
        BANKDETAILS.CREATED_BY AS BANKDETAILS_CREATED_BY,
        BANKDETAILS.START_CHECK_NUM AS BANKDETAILS_START_CHECK_NUM,
        BANKDETAILS.END_CHECK_NUM AS BANKDETAILS_END_CHECK_NUM,
        S.NAME_ON_CHECK AS S_NAME_ON_CHECK,
        S.CHECK_HOLD_PERIOD AS S_CHECK_HOLD_PERIOD,
        CUSTBANKDETAILS.ACCOUNTNAME AS CUSTBANKDETAILS_ACCOUNTNAME,
        CUSTBANKDETAILS.ROUTING_NUM AS CUSTBANKDETAILS_ROUTING_NUM,
        CUSTBANKDETAILS.ACCOUNT_NUM AS CUSTBANKDETAILS_ACCOUNT_NUM,
        CUSTBANKDETAILS.BANK_ADDRLINE1 AS CUSTBANKDETAILS_BANK_ADDRLINE1,
        CUSTBANKDETAILS.BANK_ADDRLINE2 AS CUSTBANKDETAILS_BANK_ADDRLINE2,
        CUSTBANKDETAILS.BANK_CITY AS CUSTBANKDETAILS_BANK_CITY,
        CUSTBANKDETAILS.BANK_STATE AS CUSTBANKDETAILS_BANK_STATE,
        CUSTBANKDETAILS.BANK_ZIPCODE AS CUSTBANKDETAILS_BANK_ZIPCODE,
        CUSAGFEE.MICRO_TX_CUT_OFF,
        S.ENABLE_MICRO_TX_WEB,
        s.ENABLE_MICRO_TX_OTC,
        S.ACH_HOLD_PERIOD AS S_ACH_HOLD_PERIOD,
        MERCHANT.ID AS MERCHANT_ID,
        MERCHANT.DATE_TIME_CREATED AS MERCHANT_DATE_TIME_CREATED,
        MERCHANT.DATE_TIME_MOD AS MERCHANT_DATE_TIME_MOD,
        MERCHANT.MOD_USER_ID AS MERCHANT_MOD_USER_ID,
        MERCHANT.IS_MICROPAYMENT_ACCOUNT AS MERCHANT_IS_MICROPAYMENT_ACCOUNT,
        MERCHANT.CREATED_BY AS MERCHANT_CREATED_BY,
        MERCHANT.TRAN_FEE_PERCENTAGE AS MERCHANT_TRAN_FEE_PERCENTAGE,
        MERCHANT.TRAN_FEE_FLAT AS MERCHANT_TRAN_FEE_FLAT,
        MERCHANT.TRAN_FEE_PERCENTAGE_AMEX AS MERCHANT_TRAN_FEE_PERCENTAGE_AMEX,
        MERCHANT.TRAN_FEE_FLAT_AMEX AS MERCHANT_TRAN_FEE_FLAT_AMEX,
        AA.IS_AUTHORIZATION_REQUIRED,
        AA.IS_FIRM_LEVEL_ACCESS AS AA_IS_FIRM_LEVEL_ACCESS,
        AA.MAX_USERS_ALLOWED AS AA_MAX_USERS_ALLOWED,
        AA.MAX_DOCUMENTS_ALLOWED AS AA_MAX_DOCUMENTS_ALLOWED,
        s.IS_FREE_SITE AS S_IS_FREE_SITE,
        s.IS_LOCATION_ENABLED as IS_LOCATION_ENABLED
    FROM
        ECOMM_SITE S
        LEFT OUTER JOIN ECOMM_SITE_ACCESS SA ON S.ID = SA.SITE_ID
        LEFT OUTER JOIN AUTH_ACCESS AA ON SA.ACCESS_ID = AA.ID
        LEFT OUTER JOIN ECOMM_SUBSCRIPTIONFEE FEE ON FEE.SITEACCESS_ID = SA.ID
        LEFT OUTER JOIN CODELOOKUP LOOKUP ON LOOKUP.ID = FEE.SUBSCRIPTION_TYP_ID
        LEFT OUTER JOIN ECOMM_CREDITUSAGE_FEE CUSAGFEE ON S.ID = CUSAGFEE.SITE_ID
        LEFT OUTER JOIN ECOMM_NON_RECURRING_FEE NRF ON NRF.SITEACCESS_ID = SA.ID
        LEFT OUTER JOIN CODELOOKUP LOOKUP2 ON LOOKUP2.ID = NRF.SUBSCRIPTION_TYP_ID
        LEFT OUTER JOIN ECOMM_PROFIT_SHARE PROFIT ON PROFIT.ACCESS_ID = AA.ID
        LEFT OUTER JOIN ECOMM_CUSTOMER_BANK_DETAILS CUSTBANKDETAILS ON CUSTBANKDETAILS.SITE_ID = S.ID
        INNER JOIN ECOMM_BANK_DETAILS BANKDETAILS ON BANKDETAILS.SITE_ID = S.ID
        INNER JOIN ECOMM_MERCHANTINFO MERCHANT ON MERCHANT.SITE_ID = S.ID
    WHERE
        S.id = :siteId
        ORDER BY AA.ACCESS_ORDER ASC
    </sql-query>

    <sql-query callable="true" name="GET_CHECKHISTORIES">
        {call SP_CHECK_GET_HISTORY (:siteId, :fromDate, :toDate, :checkNum, :checkAmt) }
    </sql-query>

	<sql-query name="GET_PAYMENT_TYPE">
	    <![CDATA[
	    SELECT 'OTC'  FROM ECOMM_OTC_TX OTC WHERE OTC.TX_REFERENCE_NUM = :txRefNumber
		UNION
		SELECT 'WEB' FROM ECOMM_WEBPAY_TX WEB WHERE WEB.TX_REFERENCE_NUM = :txRefNumber
	       ]]>
	</sql-query>

	<sql-query name="GET_OTC_TX_DETAILS">
	    <![CDATA[ SELECT DISTINCT
    	        TX.TX_ID AS TX_ID
	            ,TX.TX_REFERENCE_NUM AS TX_TX_REFERENCE_NUM
            	,TX.ORG_REF_NUM AS TX_ORG_REF_NUM
            	,TX.AMOUNT AS TX_AMOUNT
            	,TX.SERVICE_FEE AS TX_SERVICE_FEE
            	,TX.TX_AMOUNT AS TX_TX_AMOUNT
            	,TX.COMMENTS AS TX_COMMENTS
            	,TX.TX_TYPE AS TX_TX_TYPE
            	,TX.CHECKNUM AS TX_CHECKNUM
            	,TX.TX_DATE AS TX_TX_DATE                         
            	,TX.CARD_NUMBER AS TX_CARD_NUMBER
            	,TX.ACCOUNTNAME AS TX_ACCOUNTNAME            
            	,TX.MOD_USER_ID AS TX_MOD_USER_ID
            	,TX.DATE_TIME_CREATED AS TX_DATE_TIME_CREATED
    		    ,TX.SETTLEMENT_STATUS AS TX_SETTLEMENT_STATUS
	            ,TX.CREATED_BY AS TX_CREATED_BY
            FROM
				V_OTC_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber	      	
	      	AND TX.ITEM_NAME LIKE :productName
	      	AND TX.PRODUCT_TYPE LIKE :productType
	      	AND TX.INVOICE_NUMBER LIKE :invoiceId	      	
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
      		ORDER BY TX.TX_DATE DESC 
      		OFFSET :startFrom ROWS
			FETCH NEXT :numberOfRecords ROWS ONLY
	       ]]>
	</sql-query>
	

	<sql-query name="GET_OTC_TX_DETAILS_COUNT">
	    <![CDATA[
	    	SELECT COUNT(DISTINCT TX.TX_ID)
            FROM
				V_OTC_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
      		AND TX.ITEM_NAME LIKE :productName
	      	AND TX.PRODUCT_TYPE LIKE :productType
	      	AND TX.INVOICE_NUMBER LIKE :invoiceId
	       ]]>
	</sql-query>
	
	<sql-query name="GET_WEB_TX_DETAILS">
	    <![CDATA[
	    	SELECT DISTINCT
    	        TX.TX_ID AS TX_ID
	            ,TX.TX_REFERENCE_NUM AS TX_TX_REFERENCE_NUM
            	,TX.ORG_REF_NUM AS TX_ORG_REF_NUM
            	,TX.AMOUNT AS TX_AMOUNT
            	,TX.SERVICE_FEE AS TX_SERVICE_FEE
            	,TX.TX_AMOUNT AS TX_TX_AMOUNT
            	,TX.COMMENTS AS TX_COMMENTS
            	,TX.TX_TYPE AS TX_TX_TYPE
            	,TX.CHECKNUM AS TX_CHECKNUM
            	,TX.TX_DATE AS TX_TX_DATE                         
            	,TX.CARD_NUMBER AS TX_CARD_NUMBER
            	,TX.ACCOUNTNAME AS TX_ACCOUNTNAME            
            	,TX.MOD_USER_ID AS TX_MOD_USER_ID
            	,TX.DATE_TIME_CREATED AS TX_DATE_TIME_CREATED
    		    ,TX.SETTLEMENT_STATUS AS TX_SETTLEMENT_STATUS
	            ,TX.CREATED_BY AS TX_CREATED_BY
            FROM
				V_WEB_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
			AND TX.PRODUCT_ID LIKE :productId
			AND TX.ITEM_NAME LIKE :productName
			AND TX.PRODUCT_TYPE LIKE :productType
			AND TX.INVOICE_NUMBER LIKE :invoiceId
      		ORDER BY TX.TX_DATE DESC 
      		OFFSET :startFrom ROWS
			FETCH NEXT :numberOfRecords ROWS ONLY
	       ]]>
	</sql-query>
	
<sql-query name="GET_WEB_TX_DETAILS_COUNT">
	    <![CDATA[
	    	SELECT COUNT(DISTINCT TX.TX_ID)
            FROM
				V_WEB_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
			AND TX.PRODUCT_ID LIKE :productId
			AND TX.ITEM_NAME LIKE :productName
			AND TX.PRODUCT_TYPE LIKE :productType
			AND TX.INVOICE_NUMBER LIKE :invoiceId
	       ]]>
	</sql-query>	

	<sql-query name="GET_PAYASUGO_TX_DETAILS">
	    <![CDATA[
	    	SELECT  DISTINCT
    	        TX.TX_ID AS TX_ID
	            ,TX.TX_REFERENCE_NUM AS TX_TX_REFERENCE_NUM
            	,TX.ORG_REF_NUM AS TX_ORG_REF_NUM
            	,TX.AMOUNT AS TX_AMOUNT
            	,TX.SERVICE_FEE AS TX_SERVICE_FEE
            	,TX.TX_AMOUNT AS TX_TX_AMOUNT
            	,TX.COMMENTS AS TX_COMMENTS
            	,TX.TX_TYPE AS TX_TX_TYPE
            	,TX.CHECKNUM AS TX_CHECKNUM
            	,TX.TX_DATE AS TX_TX_DATE                         
            	,TX.CARD_NUMBER AS TX_CARD_NUMBER
            	,TX.ACCOUNTNAME AS TX_ACCOUNTNAME            
            	,TX.MOD_USER_ID AS TX_MOD_USER_ID
            	,TX.DATE_TIME_CREATED AS TX_DATE_TIME_CREATED
    		    ,TX.SETTLEMENT_STATUS AS TX_SETTLEMENT_STATUS
	            ,TX.CREATED_BY AS TX_CREATED_BY
            FROM
				V_PAYASUGO_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
			AND TX.PRODUCT_ID LIKE :productId
			AND TX.ITEM_NAME LIKE :productName
			AND TX.PRODUCT_TYPE LIKE :productType                                         
      		ORDER BY TX.TX_DATE DESC 
      		OFFSET :startFrom ROWS
			FETCH NEXT :numberOfRecords ROWS ONLY
	       ]]>
	</sql-query>
	
	<sql-query name="GET_PAYASUGO_TX_DETAILS_COUNT">
	    <![CDATA[
	    	SELECT COUNT(DISTINCT TX.TX_ID)
            FROM
				V_PAYASUGO_GET_TX_DETAILS TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
			AND TX.PRODUCT_ID LIKE :productId
			AND TX.ITEM_NAME LIKE :productName
			AND TX.PRODUCT_TYPE LIKE :productType                                         
	       ]]>
	</sql-query>
	
	<sql-query name="GET_RECURRING_TX_DETAILS">
	    <![CDATA[ SELECT  DISTINCT
    	        TX.TX_ID AS TX_ID
	            ,TX.TX_REFERENCE_NUM AS TX_TX_REFERENCE_NUM
            	,TX.ORG_REF_NUM AS TX_ORG_REF_NUM
            	,TX.AMOUNT AS TX_AMOUNT
            	,TX.SERVICE_FEE AS TX_SERVICE_FEE
            	,TX.TX_AMOUNT AS TX_TX_AMOUNT
            	,TX.COMMENTS AS TX_COMMENTS
            	,TX.TX_TYPE AS TX_TX_TYPE
            	,TX.CHECKNUM AS TX_CHECKNUM
            	,TX.TX_DATE AS TX_TX_DATE                         
            	,TX.CARD_NUMBER AS TX_CARD_NUMBER
            	,TX.ACCOUNTNAME AS TX_ACCOUNTNAME            
            	,TX.MOD_USER_ID AS TX_MOD_USER_ID
            	,TX.DATE_TIME_CREATED AS TX_DATE_TIME_CREATED
    		    ,TX.SETTLEMENT_STATUS AS TX_SETTLEMENT_STATUS
	            ,TX.CREATED_BY AS TX_CREATED_BY
            FROM
				V_RECURRING_GET_TX_DETAILS  TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
      		ORDER BY TX.TX_DATE DESC 
      		OFFSET :startFrom ROWS
			FETCH NEXT :numberOfRecords ROWS ONLY
	       ]]>
	</sql-query>
	
<sql-query name="GET_RECURRING_TX_DETAILS_COUNT">
	    <![CDATA[ SELECT
    	        COUNT(DISTINCT TX.TX_ID)
            FROM
				V_RECURRING_GET_TX_DETAILS  TX
			WHERE
      		TX.TX_REFERENCE_NUM LIKE :txRefNumber     
			AND TX.ACCOUNTNAME LIKE :accountName
	      	AND TX.CARD_NUMBER LIKE :accountNumber
			AND CONVERT(DATE, TX.TX_DATE)  >= :transactionStartDate
			AND CONVERT(DATE, TX.TX_DATE) <= :transactionEndDate
      		AND TX.SITE_NAME LIKE :siteName
	       ]]>
	</sql-query>	

 </hibernate-mapping>
